
arm_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00007030  2**0
                  CONTENTS
  4 .ARM          00000008  0800537c  0800537c  0000637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005384  08005384  00007030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08005384  08005384  00006384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08005394  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000030  080053c4  00007030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080053c4  00007348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172fe  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d83  00000000  00000000  0001e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000210e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  00021eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250bd  00000000  00000000  00022980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e76  00000000  00000000  00047a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4085  00000000  00000000  0005a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  0012e97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001323cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000030 	.word	0x20000030
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800534c 	.word	0x0800534c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000034 	.word	0x20000034
 8000204:	0800534c 	.word	0x0800534c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
	UART_servo(uint16_t id,uint16_t _reflect_time,UART_HandleTypeDef _servo_uart){
 8000d34:	b082      	sub	sp, #8
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	803b      	strh	r3, [r7, #0]
			motorId = id;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	801a      	strh	r2, [r3, #0]
			reflectime = _reflect_time;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	883a      	ldrh	r2, [r7, #0]
 8000d52:	811a      	strh	r2, [r3, #8]
			servo_uart = _servo_uart;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	330c      	adds	r3, #12
 8000d58:	f107 0114 	add.w	r1, r7, #20
 8000d5c:	2248      	movs	r2, #72	@ 0x48
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fae6 	bl	8005330 <memcpy>
		};
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d70:	b002      	add	sp, #8
 8000d72:	4770      	bx	lr

08000d74 <arm_reset>:

int arm_status = 1;
int all_status =0;
static uint32_t last_command_time = 0;

void arm_reset(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	// 手臂重置邏輯
	HAL_Init();
 8000d78:	f001 fc96 	bl	80026a8 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000d7c:	213c      	movs	r1, #60	@ 0x3c
 8000d7e:	481a      	ldr	r0, [pc, #104]	@ (8000de8 <arm_reset+0x74>)
 8000d80:	f002 ffc8 	bl	8003d14 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000d84:	2108      	movs	r1, #8
 8000d86:	4819      	ldr	r0, [pc, #100]	@ (8000dec <arm_reset+0x78>)
 8000d88:	f002 fe56 	bl	8003a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <arm_reset+0x7c>)
 8000d90:	f002 fe52 	bl	8003a38 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d9a:	4816      	ldr	r0, [pc, #88]	@ (8000df4 <arm_reset+0x80>)
 8000d9c:	f001 ff9c 	bl	8002cd8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4812      	ldr	r0, [pc, #72]	@ (8000dec <arm_reset+0x78>)
 8000da4:	f002 fe48 	bl	8003a38 <HAL_TIM_PWM_Start>

	servo1.update_pos(pos1+70);
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <arm_reset+0x84>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3346      	adds	r3, #70	@ 0x46
 8000dae:	4619      	mov	r1, r3
 8000db0:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <arm_reset+0x88>)
 8000db2:	f000 ff7c 	bl	8001cae <_ZN10UART_servo10update_posEi>
	servo2.update_pos(pos2+100);
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <arm_reset+0x8c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3364      	adds	r3, #100	@ 0x64
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <arm_reset+0x90>)
 8000dc0:	f000 ff75 	bl	8001cae <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <arm_reset+0x94>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <arm_reset+0x98>)
 8000dcc:	f000 ff6f 	bl	8001cae <_ZN10UART_servo10update_posEi>

	servo1.run();
 8000dd0:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <arm_reset+0x88>)
 8000dd2:	f000 ff53 	bl	8001c7c <_ZN10UART_servo3runEv>
	servo2.run();
 8000dd6:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <arm_reset+0x90>)
 8000dd8:	f000 ff50 	bl	8001c7c <_ZN10UART_servo3runEv>
	servo3.run();
 8000ddc:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <arm_reset+0x98>)
 8000dde:	f000 ff4d 	bl	8001c7c <_ZN10UART_servo3runEv>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001d4 	.word	0x200001d4
 8000dec:	20000264 	.word	0x20000264
 8000df0:	200002ac 	.word	0x200002ac
 8000df4:	40020400 	.word	0x40020400
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	2000004c 	.word	0x2000004c
 8000e00:	20000004 	.word	0x20000004
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	200000f4 	.word	0x200000f4

08000e10 <menu_camera>:
//
//		HAL_Delay(DELAY_MS); // 10ms 更新一次
//		}
//}

void menu_camera(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8000e16:	f001 fcad 	bl	8002774 <HAL_GetTick>
 8000e1a:	6078      	str	r0, [r7, #4]
	cascade_monitor(250);
 8000e1c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000ec0 <menu_camera+0xb0>
 8000e20:	f000 fe6c 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8000e24:	f000 fe60 	bl	8001ae8 <cascade_complete>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d038      	beq.n	8000ea0 <menu_camera+0x90>
		servo1.update_pos(pos1+70);
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <menu_camera+0xb4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3346      	adds	r3, #70	@ 0x46
 8000e34:	4619      	mov	r1, r3
 8000e36:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <menu_camera+0xb8>)
 8000e38:	f000 ff39 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2+70);
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <menu_camera+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3346      	adds	r3, #70	@ 0x46
 8000e42:	4619      	mov	r1, r3
 8000e44:	4822      	ldr	r0, [pc, #136]	@ (8000ed0 <menu_camera+0xc0>)
 8000e46:	f000 ff32 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 8000e4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <menu_camera+0xc4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <menu_camera+0xc8>)
 8000e52:	f000 ff2c 	bl	8001cae <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <menu_camera+0xcc>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <menu_camera+0xd0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8000e6c:	4816      	ldr	r0, [pc, #88]	@ (8000ec8 <menu_camera+0xb8>)
 8000e6e:	f000 ff05 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8000e72:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <menu_camera+0xc0>)
 8000e74:	f000 ff02 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8000e78:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <menu_camera+0xc8>)
 8000e7a:	f000 feff 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <menu_camera+0xd4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e8a:	d915      	bls.n	8000eb8 <menu_camera+0xa8>
			all_status = 1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <menu_camera+0xd8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
			arm_status = 1;
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <menu_camera+0xdc>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8000e98:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <menu_camera+0xd4>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8000e9e:	e00b      	b.n	8000eb8 <menu_camera+0xa8>
		servo1.run();
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <menu_camera+0xb8>)
 8000ea2:	f000 feeb 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8000ea6:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <menu_camera+0xc0>)
 8000ea8:	f000 fee8 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8000eac:	480a      	ldr	r0, [pc, #40]	@ (8000ed8 <menu_camera+0xc8>)
 8000eae:	f000 fee5 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <menu_camera+0xd4>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	437a0000 	.word	0x437a0000
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	2000004c 	.word	0x2000004c
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	200000a0 	.word	0x200000a0
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200000f4 	.word	0x200000f4
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	20000264 	.word	0x20000264
 8000ee4:	2000014c 	.word	0x2000014c
 8000ee8:	20000148 	.word	0x20000148
 8000eec:	20000018 	.word	0x20000018

08000ef0 <_Z10menu_arm_1v>:

void menu_arm_1(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8000ef6:	f001 fc3d 	bl	8002774 <HAL_GetTick>
 8000efa:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+324);
 8000efc:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8000f9c <_Z10menu_arm_1v+0xac>
 8000f00:	f000 fdfc 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8000f04:	f000 fdf0 	bl	8001ae8 <cascade_complete>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d035      	beq.n	8000f7a <_Z10menu_arm_1v+0x8a>
		servo1.update_pos(pos1-18);
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <_Z10menu_arm_1v+0xb0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b12      	subs	r3, #18
 8000f14:	4619      	mov	r1, r3
 8000f16:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <_Z10menu_arm_1v+0xb4>)
 8000f18:	f000 fec9 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-18);
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <_Z10menu_arm_1v+0xb8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3b12      	subs	r3, #18
 8000f22:	4619      	mov	r1, r3
 8000f24:	4821      	ldr	r0, [pc, #132]	@ (8000fac <_Z10menu_arm_1v+0xbc>)
 8000f26:	f000 fec2 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <_Z10menu_arm_1v+0xc0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	@ (8000fb4 <_Z10menu_arm_1v+0xc4>)
 8000f32:	f000 febc 	bl	8001cae <_ZN10UART_servo10update_posEi>

		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <_Z10menu_arm_1v+0xc8>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <_Z10menu_arm_1v+0xcc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8000f4c:	4815      	ldr	r0, [pc, #84]	@ (8000fa4 <_Z10menu_arm_1v+0xb4>)
 8000f4e:	f000 fe95 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8000f52:	4816      	ldr	r0, [pc, #88]	@ (8000fac <_Z10menu_arm_1v+0xbc>)
 8000f54:	f000 fe92 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <_Z10menu_arm_1v+0xc4>)
 8000f5a:	f000 fe8f 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <_Z10menu_arm_1v+0xd0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f6a:	d912      	bls.n	8000f92 <_Z10menu_arm_1v+0xa2>
			arm_status = 2;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <_Z10menu_arm_1v+0xd4>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <_Z10menu_arm_1v+0xd0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8000f78:	e00b      	b.n	8000f92 <_Z10menu_arm_1v+0xa2>
		servo1.run();
 8000f7a:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <_Z10menu_arm_1v+0xb4>)
 8000f7c:	f000 fe7e 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8000f80:	480a      	ldr	r0, [pc, #40]	@ (8000fac <_Z10menu_arm_1v+0xbc>)
 8000f82:	f000 fe7b 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8000f86:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <_Z10menu_arm_1v+0xc4>)
 8000f88:	f000 fe78 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <_Z10menu_arm_1v+0xd0>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	440f8000 	.word	0x440f8000
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	2000004c 	.word	0x2000004c
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	200000a0 	.word	0x200000a0
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200000f4 	.word	0x200000f4
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	20000264 	.word	0x20000264
 8000fc0:	2000014c 	.word	0x2000014c
 8000fc4:	20000018 	.word	0x20000018

08000fc8 <_Z10menu_arm_2v>:

void menu_arm_2(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8000fce:	f001 fbd1 	bl	8002774 <HAL_GetTick>
 8000fd2:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+324);
 8000fd4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800103c <_Z10menu_arm_2v+0x74>
 8000fd8:	f000 fd90 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8000fdc:	f000 fd84 	bl	8001ae8 <cascade_complete>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d019      	beq.n	800101a <_Z10menu_arm_2v+0x52>
		servo3.update_pos(gripper_close);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <_Z10menu_arm_2v+0x78>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	@ (8001044 <_Z10menu_arm_2v+0x7c>)
 8000fee:	f000 fe5e 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.run();
 8000ff2:	4814      	ldr	r0, [pc, #80]	@ (8001044 <_Z10menu_arm_2v+0x7c>)
 8000ff4:	f000 fe42 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_Z10menu_arm_2v+0x80>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001004:	d915      	bls.n	8001032 <_Z10menu_arm_2v+0x6a>
			all_status = 1;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_Z10menu_arm_2v+0x84>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
			arm_status = 1;
 800100c:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <_Z10menu_arm_2v+0x88>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8001012:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <_Z10menu_arm_2v+0x80>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8001018:	e00b      	b.n	8001032 <_Z10menu_arm_2v+0x6a>
		servo1.run();
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <_Z10menu_arm_2v+0x8c>)
 800101c:	f000 fe2e 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <_Z10menu_arm_2v+0x90>)
 8001022:	f000 fe2b 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <_Z10menu_arm_2v+0x7c>)
 8001028:	f000 fe28 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <_Z10menu_arm_2v+0x80>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	440f8000 	.word	0x440f8000
 8001040:	2000000c 	.word	0x2000000c
 8001044:	200000f4 	.word	0x200000f4
 8001048:	2000014c 	.word	0x2000014c
 800104c:	20000148 	.word	0x20000148
 8001050:	20000018 	.word	0x20000018
 8001054:	2000004c 	.word	0x2000004c
 8001058:	200000a0 	.word	0x200000a0

0800105c <table_camera>:

void table_camera(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001062:	f001 fb87 	bl	8002774 <HAL_GetTick>
 8001066:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+29);
 8001068:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001108 <table_camera+0xac>
 800106c:	f000 fd46 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8001070:	f000 fd3a 	bl	8001ae8 <cascade_complete>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d035      	beq.n	80010e6 <table_camera+0x8a>
		servo1.update_pos(pos1-19); //35
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <table_camera+0xb0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3b13      	subs	r3, #19
 8001080:	4619      	mov	r1, r3
 8001082:	4823      	ldr	r0, [pc, #140]	@ (8001110 <table_camera+0xb4>)
 8001084:	f000 fe13 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-19); //90
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <table_camera+0xb8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b13      	subs	r3, #19
 800108e:	4619      	mov	r1, r3
 8001090:	4821      	ldr	r0, [pc, #132]	@ (8001118 <table_camera+0xbc>)
 8001092:	f000 fe0c 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_close);
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <table_camera+0xc0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4820      	ldr	r0, [pc, #128]	@ (8001120 <table_camera+0xc4>)
 800109e:	f000 fe06 	bl	8001cae <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_down);
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <table_camera+0xc8>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <table_camera+0xcc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 80010b8:	4815      	ldr	r0, [pc, #84]	@ (8001110 <table_camera+0xb4>)
 80010ba:	f000 fddf 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <table_camera+0xbc>)
 80010c0:	f000 fddc 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <table_camera+0xc4>)
 80010c6:	f000 fdd9 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <table_camera+0xd0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010d6:	d912      	bls.n	80010fe <table_camera+0xa2>
			all_status = 1;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <table_camera+0xd4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <table_camera+0xd0>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 80010e4:	e00b      	b.n	80010fe <table_camera+0xa2>
		servo1.run();
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <table_camera+0xb4>)
 80010e8:	f000 fdc8 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 80010ec:	480a      	ldr	r0, [pc, #40]	@ (8001118 <table_camera+0xbc>)
 80010ee:	f000 fdc5 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 80010f2:	480b      	ldr	r0, [pc, #44]	@ (8001120 <table_camera+0xc4>)
 80010f4:	f000 fdc2 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <table_camera+0xd0>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	438b8000 	.word	0x438b8000
 800110c:	20000000 	.word	0x20000000
 8001110:	2000004c 	.word	0x2000004c
 8001114:	20000004 	.word	0x20000004
 8001118:	200000a0 	.word	0x200000a0
 800111c:	2000000c 	.word	0x2000000c
 8001120:	200000f4 	.word	0x200000f4
 8001124:	20000014 	.word	0x20000014
 8001128:	20000264 	.word	0x20000264
 800112c:	2000014c 	.word	0x2000014c
 8001130:	20000148 	.word	0x20000148

08001134 <_Z11table_arm_1v>:

void table_arm_1(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 800113a:	f001 fb1b 	bl	8002774 <HAL_GetTick>
 800113e:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+73);
 8001140:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80011e0 <_Z11table_arm_1v+0xac>
 8001144:	f000 fcda 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8001148:	f000 fcce 	bl	8001ae8 <cascade_complete>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d035      	beq.n	80011be <_Z11table_arm_1v+0x8a>
		servo1.update_pos(pos1-56);
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <_Z11table_arm_1v+0xb0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3b38      	subs	r3, #56	@ 0x38
 8001158:	4619      	mov	r1, r3
 800115a:	4823      	ldr	r0, [pc, #140]	@ (80011e8 <_Z11table_arm_1v+0xb4>)
 800115c:	f000 fda7 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2-56);
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <_Z11table_arm_1v+0xb8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b38      	subs	r3, #56	@ 0x38
 8001166:	4619      	mov	r1, r3
 8001168:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <_Z11table_arm_1v+0xbc>)
 800116a:	f000 fda0 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_close);
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <_Z11table_arm_1v+0xc0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	4820      	ldr	r0, [pc, #128]	@ (80011f8 <_Z11table_arm_1v+0xc4>)
 8001176:	f000 fd9a 	bl	8001cae <_ZN10UART_servo10update_posEi>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 600+10*camera_front);
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <_Z11table_arm_1v+0xc8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <_Z11table_arm_1v+0xcc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
		servo1.run();
 8001190:	4815      	ldr	r0, [pc, #84]	@ (80011e8 <_Z11table_arm_1v+0xb4>)
 8001192:	f000 fd73 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8001196:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <_Z11table_arm_1v+0xbc>)
 8001198:	f000 fd70 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 800119c:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <_Z11table_arm_1v+0xc4>)
 800119e:	f000 fd6d 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <_Z11table_arm_1v+0xd0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011ae:	d912      	bls.n	80011d6 <_Z11table_arm_1v+0xa2>
			arm_status = 2;
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_Z11table_arm_1v+0xd4>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 80011b6:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <_Z11table_arm_1v+0xd0>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 80011bc:	e00b      	b.n	80011d6 <_Z11table_arm_1v+0xa2>
		servo1.run();
 80011be:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <_Z11table_arm_1v+0xb4>)
 80011c0:	f000 fd5c 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <_Z11table_arm_1v+0xbc>)
 80011c6:	f000 fd59 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <_Z11table_arm_1v+0xc4>)
 80011cc:	f000 fd56 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <_Z11table_arm_1v+0xd0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	43a18000 	.word	0x43a18000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	2000004c 	.word	0x2000004c
 80011ec:	20000004 	.word	0x20000004
 80011f0:	200000a0 	.word	0x200000a0
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	200000f4 	.word	0x200000f4
 80011fc:	20000010 	.word	0x20000010
 8001200:	20000264 	.word	0x20000264
 8001204:	2000014c 	.word	0x2000014c
 8001208:	20000018 	.word	0x20000018

0800120c <_Z11table_arm_2v>:

void table_arm_2(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001212:	f001 faaf 	bl	8002774 <HAL_GetTick>
 8001216:	6078      	str	r0, [r7, #4]
	cascade_monitor(250+73);
 8001218:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001278 <_Z11table_arm_2v+0x6c>
 800121c:	f000 fc6e 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 8001220:	f000 fc62 	bl	8001ae8 <cascade_complete>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <_Z11table_arm_2v+0x4c>
		servo3.update_pos(gripper_open);
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <_Z11table_arm_2v+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <_Z11table_arm_2v+0x74>)
 8001232:	f000 fd3c 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.run();
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <_Z11table_arm_2v+0x74>)
 8001238:	f000 fd20 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_Z11table_arm_2v+0x78>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001248:	d912      	bls.n	8001270 <_Z11table_arm_2v+0x64>
			arm_status = 3;
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <_Z11table_arm_2v+0x7c>)
 800124c:	2203      	movs	r2, #3
 800124e:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8001250:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <_Z11table_arm_2v+0x78>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 8001256:	e00b      	b.n	8001270 <_Z11table_arm_2v+0x64>
		servo1.run();
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <_Z11table_arm_2v+0x80>)
 800125a:	f000 fd0f 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <_Z11table_arm_2v+0x84>)
 8001260:	f000 fd0c 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 8001264:	4806      	ldr	r0, [pc, #24]	@ (8001280 <_Z11table_arm_2v+0x74>)
 8001266:	f000 fd09 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 800126a:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <_Z11table_arm_2v+0x78>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	43a18000 	.word	0x43a18000
 800127c:	20000008 	.word	0x20000008
 8001280:	200000f4 	.word	0x200000f4
 8001284:	2000014c 	.word	0x2000014c
 8001288:	20000018 	.word	0x20000018
 800128c:	2000004c 	.word	0x2000004c
 8001290:	200000a0 	.word	0x200000a0

08001294 <_Z11table_arm_3v>:

void table_arm_3(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 800129a:	f001 fa6b 	bl	8002774 <HAL_GetTick>
 800129e:	6078      	str	r0, [r7, #4]
	cascade_monitor(250);
 80012a0:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001330 <_Z11table_arm_3v+0x9c>
 80012a4:	f000 fc2a 	bl	8001afc <cascade_monitor>
	if(cascade_complete()){
 80012a8:	f000 fc1e 	bl	8001ae8 <cascade_complete>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d02d      	beq.n	800130e <_Z11table_arm_3v+0x7a>
		servo1.update_pos(pos1+70);
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <_Z11table_arm_3v+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3346      	adds	r3, #70	@ 0x46
 80012b8:	4619      	mov	r1, r3
 80012ba:	481f      	ldr	r0, [pc, #124]	@ (8001338 <_Z11table_arm_3v+0xa4>)
 80012bc:	f000 fcf7 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2+100);
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <_Z11table_arm_3v+0xa8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3364      	adds	r3, #100	@ 0x64
 80012c6:	4619      	mov	r1, r3
 80012c8:	481d      	ldr	r0, [pc, #116]	@ (8001340 <_Z11table_arm_3v+0xac>)
 80012ca:	f000 fcf0 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo3.update_pos(gripper_open);
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <_Z11table_arm_3v+0xb0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	481c      	ldr	r0, [pc, #112]	@ (8001348 <_Z11table_arm_3v+0xb4>)
 80012d6:	f000 fcea 	bl	8001cae <_ZN10UART_servo10update_posEi>
		servo1.run();
 80012da:	4817      	ldr	r0, [pc, #92]	@ (8001338 <_Z11table_arm_3v+0xa4>)
 80012dc:	f000 fcce 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 80012e0:	4817      	ldr	r0, [pc, #92]	@ (8001340 <_Z11table_arm_3v+0xac>)
 80012e2:	f000 fccb 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <_Z11table_arm_3v+0xb4>)
 80012e8:	f000 fcc8 	bl	8001c7c <_ZN10UART_servo3runEv>
		if(current_time-last_command_time>2000){
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <_Z11table_arm_3v+0xb8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012f8:	d915      	bls.n	8001326 <_Z11table_arm_3v+0x92>
			all_status = 1;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <_Z11table_arm_3v+0xbc>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
			arm_status = 1;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <_Z11table_arm_3v+0xc0>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
			last_command_time = current_time;
 8001306:	4a11      	ldr	r2, [pc, #68]	@ (800134c <_Z11table_arm_3v+0xb8>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
		servo1.run();
		servo2.run();
		servo3.run();
		last_command_time = current_time;
	}
}
 800130c:	e00b      	b.n	8001326 <_Z11table_arm_3v+0x92>
		servo1.run();
 800130e:	480a      	ldr	r0, [pc, #40]	@ (8001338 <_Z11table_arm_3v+0xa4>)
 8001310:	f000 fcb4 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo2.run();
 8001314:	480a      	ldr	r0, [pc, #40]	@ (8001340 <_Z11table_arm_3v+0xac>)
 8001316:	f000 fcb1 	bl	8001c7c <_ZN10UART_servo3runEv>
		servo3.run();
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <_Z11table_arm_3v+0xb4>)
 800131c:	f000 fcae 	bl	8001c7c <_ZN10UART_servo3runEv>
		last_command_time = current_time;
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <_Z11table_arm_3v+0xb8>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	437a0000 	.word	0x437a0000
 8001334:	20000000 	.word	0x20000000
 8001338:	2000004c 	.word	0x2000004c
 800133c:	20000004 	.word	0x20000004
 8001340:	200000a0 	.word	0x200000a0
 8001344:	20000008 	.word	0x20000008
 8001348:	200000f4 	.word	0x200000f4
 800134c:	2000014c 	.word	0x2000014c
 8001350:	20000148 	.word	0x20000148
 8001354:	20000018 	.word	0x20000018

08001358 <arm_mission>:
//		servo2.run();
//		servo3.run();
//	}
}

void arm_mission(int code) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	// 根據 code 執行不同的手臂任務
	switch(code) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	2b03      	cmp	r3, #3
 8001366:	d82f      	bhi.n	80013c8 <arm_mission+0x70>
 8001368:	a201      	add	r2, pc, #4	@ (adr r2, 8001370 <arm_mission+0x18>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	08001381 	.word	0x08001381
 8001374:	08001387 	.word	0x08001387
 8001378:	0800139f 	.word	0x0800139f
 800137c:	080013a5 	.word	0x080013a5
		case 1:
			menu_camera();
 8001380:	f7ff fd46 	bl	8000e10 <menu_camera>
			break;
 8001384:	e023      	b.n	80013ce <arm_mission+0x76>
		case 2:
			switch(arm_status){
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <arm_mission+0x80>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d002      	beq.n	8001394 <arm_mission+0x3c>
 800138e:	2b02      	cmp	r3, #2
 8001390:	d002      	beq.n	8001398 <arm_mission+0x40>
				case 1:
				menu_arm_1();
				case 2:
				menu_arm_2();
			}
			break;
 8001392:	e01c      	b.n	80013ce <arm_mission+0x76>
				menu_arm_1();
 8001394:	f7ff fdac 	bl	8000ef0 <_Z10menu_arm_1v>
				menu_arm_2();
 8001398:	f7ff fe16 	bl	8000fc8 <_Z10menu_arm_2v>
			break;
 800139c:	e017      	b.n	80013ce <arm_mission+0x76>
		case 3:
			table_camera();
 800139e:	f7ff fe5d 	bl	800105c <table_camera>
			break;
 80013a2:	e014      	b.n	80013ce <arm_mission+0x76>
		case 4:
			switch(arm_status){
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <arm_mission+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d00a      	beq.n	80013c2 <arm_mission+0x6a>
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	dc0d      	bgt.n	80013cc <arm_mission+0x74>
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d002      	beq.n	80013ba <arm_mission+0x62>
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d002      	beq.n	80013be <arm_mission+0x66>
				case 2:
				table_arm_2();
				case 3:
				table_arm_3();
			}
			break;
 80013b8:	e008      	b.n	80013cc <arm_mission+0x74>
				table_arm_1();
 80013ba:	f7ff febb 	bl	8001134 <_Z11table_arm_1v>
				table_arm_2();
 80013be:	f7ff ff25 	bl	800120c <_Z11table_arm_2v>
				table_arm_3();
 80013c2:	f7ff ff67 	bl	8001294 <_Z11table_arm_3v>
			break;
 80013c6:	e001      	b.n	80013cc <arm_mission+0x74>
		default:
			// 預設情況
			break;
 80013c8:	bf00      	nop
 80013ca:	e000      	b.n	80013ce <arm_mission+0x76>
			break;
 80013cc:	bf00      	nop
	}
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000018 	.word	0x20000018

080013dc <_Z41__static_initialization_and_destruction_0ii>:
	}
	else
	{
		return 0;
	}
}
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b095      	sub	sp, #84	@ 0x54
 80013e0:	af12      	add	r7, sp, #72	@ 0x48
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d12e      	bne.n	800144a <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d129      	bne.n	800144a <_Z41__static_initialization_and_destruction_0ii+0x6e>
UART_servo servo1(1, 2000, huart3);
 80013f6:	4c17      	ldr	r4, [pc, #92]	@ (8001454 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80013f8:	4668      	mov	r0, sp
 80013fa:	1d23      	adds	r3, r4, #4
 80013fc:	2244      	movs	r2, #68	@ 0x44
 80013fe:	4619      	mov	r1, r3
 8001400:	f003 ff96 	bl	8005330 <memcpy>
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800140a:	2101      	movs	r1, #1
 800140c:	4812      	ldr	r0, [pc, #72]	@ (8001458 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800140e:	f7ff fc91 	bl	8000d34 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, huart3);
 8001412:	4c10      	ldr	r4, [pc, #64]	@ (8001454 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001414:	4668      	mov	r0, sp
 8001416:	1d23      	adds	r3, r4, #4
 8001418:	2244      	movs	r2, #68	@ 0x44
 800141a:	4619      	mov	r1, r3
 800141c:	f003 ff88 	bl	8005330 <memcpy>
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001426:	2103      	movs	r1, #3
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800142a:	f7ff fc83 	bl	8000d34 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, huart3);
 800142e:	4c09      	ldr	r4, [pc, #36]	@ (8001454 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001430:	4668      	mov	r0, sp
 8001432:	1d23      	adds	r3, r4, #4
 8001434:	2244      	movs	r2, #68	@ 0x44
 8001436:	4619      	mov	r1, r3
 8001438:	f003 ff7a 	bl	8005330 <memcpy>
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001442:	2104      	movs	r1, #4
 8001444:	4806      	ldr	r0, [pc, #24]	@ (8001460 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001446:	f7ff fc75 	bl	8000d34 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	200002f4 	.word	0x200002f4
 8001458:	2000004c 	.word	0x2000004c
 800145c:	200000a0 	.word	0x200000a0
 8001460:	200000f4 	.word	0x200000f4

08001464 <_GLOBAL__sub_I_servo1>:
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
 8001468:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff ffb5 	bl	80013dc <_Z41__static_initialization_and_destruction_0ii>
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
 800147e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001482:	eef0 7ae7 	vabs.f32	s15, s15
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZN15MotorController4initEii>:
float v = 0.3;
float e = 1.0;

//extern TIM_HandleTypeDef htim12;

void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	213c      	movs	r1, #60	@ 0x3c
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fc34 	bl	8003d14 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f002 fabe 	bl	8003a38 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
    _dir_ctrl = dir_ctrl;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	659a      	str	r2, [r3, #88]	@ 0x58
    _en_ctrl = en_ctrl;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	ed87 0a00 	vstr	s0, [r7]

    _targetSpeed = speed;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38
//    times++;
    ComputePID();
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f874 	bl	80015d0 <_ZN15MotorController10ComputePIDEv>

//    if (_pidOutput > 80.0) _pidOutput = 80.0;
//    if (_pidOutput < -80.0) _pidOutput = -80.0;
    if (_dir_ctrl == 1){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d112      	bne.n	8001516 <_ZN15MotorController8setSpeedEf+0x46>
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6958      	ldr	r0, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	8b19      	ldrh	r1, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	db01      	blt.n	800150c <_ZN15MotorController8setSpeedEf+0x3c>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <_ZN15MotorController8setSpeedEf+0x3e>
 800150c:	2300      	movs	r3, #0
 800150e:	461a      	mov	r2, r3
 8001510:	f001 fbe2 	bl	8002cd8 <HAL_GPIO_WritePin>
 8001514:	e014      	b.n	8001540 <_ZN15MotorController8setSpeedEf+0x70>
////    	HAL_GPIO_WritePin(_AGPIO, _APin, GPIO_PIN_SET);
//    	HAL_GPIO_WritePin(_BGPIO, _BPin, GPIO_PIN_RESET);
//    }

    }else{
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6958      	ldr	r0, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	8b19      	ldrh	r1, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	bfac      	ite	ge
 800152e:	2301      	movge	r3, #1
 8001530:	2300      	movlt	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f083 0301 	eor.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	f001 fbcc 	bl	8002cd8 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	f7ff ff93 	bl	8001474 <_ZSt4fabsf>
 800154e:	eef0 7a40 	vmov.f32	s15, s0
 8001552:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80015cc <_ZN15MotorController8setSpeedEf+0xfc>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155e:	ee17 3a90 	vmov	r3, s15
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	85da      	strh	r2, [r3, #46]	@ 0x2e
    if (_pwmValue < 10) _pwmValue = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800156c:	2b09      	cmp	r3, #9
 800156e:	d802      	bhi.n	8001576 <_ZN15MotorController8setSpeedEf+0xa6>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	85da      	strh	r2, [r3, #46]	@ 0x2e
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <_ZN15MotorController8setSpeedEf+0xbc>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
//	if(_pidOutput > 0) HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_SET);
//	else HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_RESET);
//
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);

}
 800158a:	e01b      	b.n	80015c4 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d106      	bne.n	80015a2 <_ZN15MotorController8setSpeedEf+0xd2>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80015a0:	e010      	b.n	80015c4 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d106      	bne.n	80015b8 <_ZN15MotorController8setSpeedEf+0xe8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015b6:	e005      	b.n	80015c4 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	447a0000 	.word	0x447a0000

080015d0 <_ZN15MotorController10ComputePIDEv>:
float MotorController::getSpeed() {
//	updateSpeed();
    return _currentSpeed;
}

float MotorController::ComputePID() {
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    updateSpeed();
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8a9 	bl	8001730 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    _integral += _error * (DT / 1000.0);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff69 	bl	80004d0 <__aeabi_f2d>
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff62 	bl	80004d0 <__aeabi_f2d>
 800160c:	a345      	add	r3, pc, #276	@ (adr r3, 8001724 <_ZN15MotorController10ComputePIDEv+0x154>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ffb5 	bl	8000580 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fdf9 	bl	8000214 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f9bb 	bl	80009a4 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	649a      	str	r2, [r3, #72]	@ 0x48
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800163a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	db04      	blt.n	8001652 <_ZN15MotorController10ComputePIDEv+0x82>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800164e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001650:	e00d      	b.n	800166e <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001658:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d803      	bhi.n	800166e <_ZN15MotorController10ComputePIDEv+0x9e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800166c:	649a      	str	r2, [r3, #72]	@ 0x48


    float derivative = (_error - _lastError) / (DT / 1000.0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff25 	bl	80004d0 <__aeabi_f2d>
 8001686:	a327      	add	r3, pc, #156	@ (adr r3, 8001724 <_ZN15MotorController10ComputePIDEv+0x154>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f8a2 	bl	80007d4 <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f984 	bl	80009a4 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80016ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edd3 6a08 	vldr	s13, [r3, #32]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // Update last error
    _lastError = _error;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	645a      	str	r2, [r3, #68]	@ 0x44
    if(_pidOutput > 1) _pidOutput = 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	dd04      	ble.n	80016f0 <_ZN15MotorController10ComputePIDEv+0x120>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ee:	e00c      	b.n	800170a <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016f6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d502      	bpl.n	800170a <_ZN15MotorController10ComputePIDEv+0x13a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <_ZN15MotorController10ComputePIDEv+0x150>)
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
    return _pidOutput;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
//    pre_error = error;

	if (_pidOutput > 1) _pidOutput = 1;
	else if (_pidOutput < -1) _pidOutput = -1;
    return _pidOutput;
}
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	bf800000 	.word	0xbf800000
 8001724:	47ae147b 	.word	0x47ae147b
 8001728:	3f847ae1 	.word	0x3f847ae1
 800172c:	00000000 	.word	0x00000000

08001730 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
//    else
//        _currentSpeed = (__HAL_TIM_GET_COUNTER(_enc) / ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0); // RPS
//
//    _last_cnt = __HAL_TIM_GET_COUNTER(_enc);

	cnt = __HAL_TIM_GetCounter(_enc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	859a      	strh	r2, [r3, #44]	@ 0x2c
	_cascade_height += -(float)cnt / (4.0f * ENCODER_RESOLUTION * REDUCTION_RATIO)* 3.14 * 3.5;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fec0 	bl	80004d0 <__aeabi_f2d>
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001762:	eef1 7a67 	vneg.f32	s15, s15
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feb0 	bl	80004d0 <__aeabi_f2d>
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b3c      	ldr	r3, [pc, #240]	@ (8001868 <_ZN15MotorController11updateSpeedEv+0x138>)
 8001776:	f7ff f82d 	bl	80007d4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	a335      	add	r3, pc, #212	@ (adr r3, 8001858 <_ZN15MotorController11updateSpeedEv+0x128>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe fefa 	bl	8000580 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b34      	ldr	r3, [pc, #208]	@ (800186c <_ZN15MotorController11updateSpeedEv+0x13c>)
 800179a:	f7fe fef1 	bl	8000580 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fd35 	bl	8000214 <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f8f7 	bl	80009a4 <__aeabi_d2f>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	661a      	str	r2, [r3, #96]	@ 0x60
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe72 	bl	80004ac <__aeabi_i2d>
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <_ZN15MotorController11updateSpeedEv+0x140>)
 80017ce:	f7ff f801 	bl	80007d4 <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <_ZN15MotorController11updateSpeedEv+0x144>)
 80017e0:	f7fe fff8 	bl	80007d4 <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <_ZN15MotorController11updateSpeedEv+0x148>)
 80017f2:	f7fe ffef 	bl	80007d4 <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	a318      	add	r3, pc, #96	@ (adr r3, 8001860 <_ZN15MotorController11updateSpeedEv+0x130>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ffe6 	bl	80007d4 <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f8c8 	bl	80009a4 <__aeabi_d2f>
 8001814:	4602      	mov	r2, r0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COUNTER(_enc, 0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    return _currentSpeed;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001844:	ee07 3a90 	vmov	s15, r3
}
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	bf00      	nop
 8001854:	f3af 8000 	nop.w
 8001858:	51eb851f 	.word	0x51eb851f
 800185c:	40091eb8 	.word	0x40091eb8
 8001860:	47ae147b 	.word	0x47ae147b
 8001864:	3f847ae1 	.word	0x3f847ae1
 8001868:	40d80000 	.word	0x40d80000
 800186c:	400c0000 	.word	0x400c0000
 8001870:	40700000 	.word	0x40700000
 8001874:	40380000 	.word	0x40380000
 8001878:	40100000 	.word	0x40100000

0800187c <_ZN15MotorController7setgoalEf>:

void MotorController::setgoal(float target_height) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	63da      	str	r2, [r3, #60]	@ 0x3c
//		_pwmValue = 0; // 停止馬達
//		_check++;
//	}
//	if(_microswitch_touched==0 && _check ==1) _check--;

	if(fabs(target_height - _cascade_height) <= e){
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001894:	ed97 7a00 	vldr	s14, [r7]
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f7ff fde8 	bl	8001474 <_ZSt4fabsf>
 80018a4:	eeb0 7a40 	vmov.f32	s14, s0
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <_ZN15MotorController7setgoalEf+0x98>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	bf94      	ite	ls
 80018b8:	2301      	movls	r3, #1
 80018ba:	2300      	movhi	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <_ZN15MotorController7setgoalEf+0x52>
		setSpeed(0);
 80018c2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001918 <_ZN15MotorController7setgoalEf+0x9c>
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fe02 	bl	80014d0 <_ZN15MotorController8setSpeedEf>
//	if(_pwmValue > 750) _pwmValue = 750;
//	if(_pwmValue < MIN_PWM) _pwmValue = MIN_PWM;
////	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (uint16_t)_pwmValue);
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);
//
}
 80018cc:	e01e      	b.n	800190c <_ZN15MotorController7setgoalEf+0x90>
	else if(target_height - _cascade_height>0) setSpeed(v);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80018d4:	ed97 7a00 	vldr	s14, [r7]
 80018d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	dd08      	ble.n	80018f8 <_ZN15MotorController7setgoalEf+0x7c>
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <_ZN15MotorController7setgoalEf+0xa0>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fded 	bl	80014d0 <_ZN15MotorController8setSpeedEf>
}
 80018f6:	e009      	b.n	800190c <_ZN15MotorController7setgoalEf+0x90>
	else setSpeed(-v);
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_ZN15MotorController7setgoalEf+0xa0>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eef1 7a67 	vneg.f32	s15, s15
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fde2 	bl	80014d0 <_ZN15MotorController8setSpeedEf>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000020 	.word	0x20000020
 8001918:	00000000 	.word	0x00000000
 800191c:	2000001c 	.word	0x2000001c

08001920 <_ZN15MotorController12goal_reachedEv>:

bool MotorController::goal_reached(){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	if(fabs(_cascade_height-_targrt_height )<=5){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	eeb0 0a67 	vmov.f32	s0, s15
 800193c:	f7ff fd9a 	bl	8001474 <_ZSt4fabsf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
 8001944:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	bf94      	ite	ls
 8001952:	2301      	movls	r3, #1
 8001954:	2300      	movhi	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d024      	beq.n	80019a6 <_ZN15MotorController12goal_reachedEv+0x86>
		__HAL_TIM_SET_COMPARE(_pwm, _channel,0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <_ZN15MotorController12goal_reachedEv+0x50>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
 800196e:	e018      	b.n	80019a2 <_ZN15MotorController12goal_reachedEv+0x82>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d105      	bne.n	8001984 <_ZN15MotorController12goal_reachedEv+0x64>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	639a      	str	r2, [r3, #56]	@ 0x38
 8001982:	e00e      	b.n	80019a2 <_ZN15MotorController12goal_reachedEv+0x82>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d105      	bne.n	8001998 <_ZN15MotorController12goal_reachedEv+0x78>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001996:	e004      	b.n	80019a2 <_ZN15MotorController12goal_reachedEv+0x82>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	641a      	str	r2, [r3, #64]	@ 0x40
		return 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <_ZN15MotorController12goal_reachedEv+0x88>
	}
	return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel,GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6278      	str	r0, [r7, #36]	@ 0x24
 80019b8:	6239      	str	r1, [r7, #32]
 80019ba:	61fa      	str	r2, [r7, #28]
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	ed87 0b04 	vstr	d0, [r7, #16]
 80019c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80019c6:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019e6:	831a      	strh	r2, [r3, #24]
 80019e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ec:	f7fe ffda 	bl	80009a4 <__aeabi_d2f>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fa:	f7fe ffd3 	bl	80009a4 <__aeabi_d2f>
 80019fe:	4602      	mov	r2, r0
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	621a      	str	r2, [r3, #32]
 8001a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a08:	f7fe ffcc 	bl	80009a4 <__aeabi_d2f>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	2200      	movs	r2, #0
 8001a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	2200      	movs	r2, #0
 8001a32:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 8001a70:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	2200      	movs	r2, #0
 8001a76:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	2200      	movs	r2, #0
 8001a84:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001a90:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	2200      	movs	r2, #0
 8001a96:	665a      	str	r2, [r3, #100]	@ 0x64
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	669a      	str	r2, [r3, #104]	@ 0x68
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	675a      	str	r2, [r3, #116]	@ 0x74
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ab2:	679a      	str	r2, [r3, #120]	@ 0x78
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	2232      	movs	r2, #50	@ 0x32
 8001ab8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	4618      	mov	r0, r3
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	42c80000 	.word	0x42c80000
 8001ac8:	437a0000 	.word	0x437a0000

08001acc <motor_init>:
//    BL :B15   PC9      PB6/PB7
//
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 1, 40, 0);
float Vgoal = 0.0;

void motor_init(){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	 Motor_cas.init(-1,-1);
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <motor_init+0x18>)
 8001ada:	f7ff fcdb 	bl	8001494 <_ZN15MotorController4initEii>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000150 	.word	0x20000150

08001ae8 <cascade_complete>:
//    Motor_BL.getSpeed();
//    Motor_FR.getSpeed();
//    Motor_FL.getSpeed();
}

bool cascade_complete(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	return Motor_cas.goal_reached();
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <cascade_complete+0x10>)
 8001aee:	f7ff ff17 	bl	8001920 <_ZN15MotorController12goal_reachedEv>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000150 	.word	0x20000150

08001afc <cascade_monitor>:

void cascade_monitor(float target_height){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_cas.setgoal(target_height);
 8001b06:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <cascade_monitor+0x1c>)
 8001b0c:	f7ff feb6 	bl	800187c <_ZN15MotorController7setgoalEf>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000150 	.word	0x20000150
 8001b1c:	00000000 	.word	0x00000000

08001b20 <_Z41__static_initialization_and_destruction_0ii>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d115      	bne.n	8001b5c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d110      	bne.n	8001b5c <_Z41__static_initialization_and_destruction_0ii+0x3c>
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 1, 40, 0);
 8001b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8001b68 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8001b48:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001b70 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001b4c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001b78 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8001b50:	2304      	movs	r3, #4
 8001b52:	4a0c      	ldr	r2, [pc, #48]	@ (8001b84 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001b54:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001b58:	f7ff ff2a 	bl	80019b0 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	f3af 8000 	nop.w
	...
 8001b74:	40440000 	.word	0x40440000
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	3ff00000 	.word	0x3ff00000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200002ac 	.word	0x200002ac
 8001b88:	200001d4 	.word	0x200001d4
 8001b8c:	20000150 	.word	0x20000150

08001b90 <_GLOBAL__sub_I_Motor_cas>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff ffc1 	bl	8001b20 <_Z41__static_initialization_and_destruction_0ii>
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8001bac:	1cfb      	adds	r3, r7, #3
 8001bae:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8001bb0:	2364      	movs	r3, #100	@ 0x64
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <_ZN10UART_servo9UART_SendEh+0x34>)
 8001bb8:	f002 ffd2 	bl	8004b60 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <_ZN10UART_servo9UART_SendEh+0x38>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <_ZN10UART_servo9UART_SendEh+0x38>)
 8001bca:	801a      	strh	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200002f4 	.word	0x200002f4
 8001bd8:	200001d0 	.word	0x200001d0

08001bdc <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	817b      	strh	r3, [r7, #10]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	813b      	strh	r3, [r7, #8]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3b80      	subs	r3, #128	@ 0x80
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4619      	mov	r1, r3
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff ffca 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8001c0c:	2183      	movs	r1, #131	@ 0x83
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff ffc6 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8001c14:	2105      	movs	r1, #5
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff ffc2 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff ffb7 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8001c32:	893b      	ldrh	r3, [r7, #8]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff ffb1 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff ffa6 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ffa0 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff ff99 	bl	8001ba0 <_ZN10UART_servo9UART_SendEh>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001d0 	.word	0x200001d0

08001c7c <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8819      	ldrh	r1, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	891b      	ldrh	r3, [r3, #8]
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff9b 	bl	8001bdc <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cce:	f000 fceb 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f811 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f000 f9f5 	bl	80020c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001cda:	f000 f9c9 	bl	8002070 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001cde:	f000 f86b 	bl	8001db8 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001ce2:	f000 f90f 	bl	8001f04 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001ce6:	f000 f971 	bl	8001fcc <MX_TIM12_Init>
  MX_TIM4_Init();
 8001cea:	f000 f8bd 	bl	8001e68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001cee:	f000 fa93 	bl	8002218 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cf2:	bf00      	nop
 8001cf4:	e7fd      	b.n	8001cf2 <main+0x28>
	...

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	@ 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	2234      	movs	r2, #52	@ 0x34
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fae6 	bl	80052d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <SystemClock_Config+0xb8>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	4a22      	ldr	r2, [pc, #136]	@ (8001db0 <SystemClock_Config+0xb8>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <SystemClock_Config+0xb8>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <SystemClock_Config+0xbc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d44:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <SystemClock_Config+0xbc>)
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <SystemClock_Config+0xbc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2310      	movs	r3, #16
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fab5 	bl	80032dc <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d78:	f000 fa48 	bl	800220c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 ffdc 	bl	8002d54 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001da2:	f000 fa33 	bl	800220c <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	@ 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2224      	movs	r2, #36	@ 0x24
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fa86 	bl	80052d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001dd6:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <MX_TIM1_Init+0xac>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e00:	2303      	movs	r3, #3
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001e2c:	f001 fecc 	bl	8003bc8 <HAL_TIM_Encoder_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e36:	f000 f9e9 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <MX_TIM1_Init+0xa8>)
 8001e48:	f002 fdaa 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e52:	f000 f9db 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	@ 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001d4 	.word	0x200001d4
 8001e64:	40010000 	.word	0x40010000

08001e68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001e86:	4a1e      	ldr	r2, [pc, #120]	@ (8001f00 <MX_TIM4_Init+0x98>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001e98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eaa:	4814      	ldr	r0, [pc, #80]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001eac:	f001 fcb4 	bl	8003818 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f9a9 	bl	800220c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001ec8:	f002 f964 	bl	8004194 <HAL_TIM_ConfigClockSource>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001ed2:	f000 f99b 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ede:	463b      	mov	r3, r7
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <MX_TIM4_Init+0x94>)
 8001ee4:	f002 fd5c 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001eee:	f000 f98d 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000021c 	.word	0x2000021c
 8001f00:	40000800 	.word	0x40000800

08001f04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f26:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f28:	4a27      	ldr	r2, [pc, #156]	@ (8001fc8 <MX_TIM5_Init+0xc4>)
 8001f2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f2e:	220f      	movs	r2, #15
 8001f30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f3a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f4c:	481d      	ldr	r0, [pc, #116]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f4e:	f001 fd23 	bl	8003998 <HAL_TIM_PWM_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f58:	f000 f958 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4816      	ldr	r0, [pc, #88]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f6c:	f002 fd18 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f76:	f000 f949 	bl	800220c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7a:	2360      	movs	r3, #96	@ 0x60
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001f92:	f002 f83d 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001f9c:	f000 f936 	bl	800220c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001fa8:	f002 f832 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001fb2:	f000 f92b 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fb6:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <MX_TIM5_Init+0xc0>)
 8001fb8:	f000 fa30 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	@ 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000264 	.word	0x20000264
 8001fc8:	40000c00 	.word	0x40000c00

08001fcc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <MX_TIM12_Init+0xa0>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16-1;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8001fec:	220f      	movs	r2, #15
 8001fee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8001ff8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ffc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800200a:	4817      	ldr	r0, [pc, #92]	@ (8002068 <MX_TIM12_Init+0x9c>)
 800200c:	f001 fcc4 	bl	8003998 <HAL_TIM_PWM_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002016:	f000 f8f9 	bl	800220c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 800201e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_TIM12_Init+0x9c>)
 8002034:	f001 ffec 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800203e:	f000 f8e5 	bl	800220c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	@ (8002068 <MX_TIM12_Init+0x9c>)
 800204a:	f001 ffe1 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8002054:	f000 f8da 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002058:	4803      	ldr	r0, [pc, #12]	@ (8002068 <MX_TIM12_Init+0x9c>)
 800205a:	f000 f9df 	bl	800241c <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200002ac 	.word	0x200002ac
 800206c:	40001800 	.word	0x40001800

08002070 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 8002076:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <MX_USART3_UART_Init+0x4c>)
 8002078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 800207c:	4a10      	ldr	r2, [pc, #64]	@ (80020c0 <MX_USART3_UART_Init+0x50>)
 800207e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 8002094:	220c      	movs	r2, #12
 8002096:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <MX_USART3_UART_Init+0x48>)
 80020a6:	f002 fd0b 	bl	8004ac0 <HAL_UART_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80020b0:	f000 f8ac 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200002f4 	.word	0x200002f4
 80020bc:	40004800 	.word	0x40004800
 80020c0:	0007a120 	.word	0x0007a120

080020c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
 80020d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b46      	ldr	r3, [pc, #280]	@ (80021f8 <MX_GPIO_Init+0x134>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <MX_GPIO_Init+0x134>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <MX_GPIO_Init+0x134>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b3f      	ldr	r3, [pc, #252]	@ (80021f8 <MX_GPIO_Init+0x134>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a3e      	ldr	r2, [pc, #248]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b38      	ldr	r3, [pc, #224]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a37      	ldr	r2, [pc, #220]	@ (80021f8 <MX_GPIO_Init+0x134>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <MX_GPIO_Init+0x134>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	2110      	movs	r1, #16
 800214e:	482b      	ldr	r0, [pc, #172]	@ (80021fc <MX_GPIO_Init+0x138>)
 8002150:	f000 fdc2 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800215a:	4829      	ldr	r0, [pc, #164]	@ (8002200 <MX_GPIO_Init+0x13c>)
 800215c:	f000 fdbc 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002166:	4827      	ldr	r0, [pc, #156]	@ (8002204 <MX_GPIO_Init+0x140>)
 8002168:	f000 fdb6 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800216c:	2310      	movs	r3, #16
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	481e      	ldr	r0, [pc, #120]	@ (80021fc <MX_GPIO_Init+0x138>)
 8002184:	f000 fc14 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002188:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4817      	ldr	r0, [pc, #92]	@ (8002200 <MX_GPIO_Init+0x13c>)
 80021a2:	f000 fc05 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4811      	ldr	r0, [pc, #68]	@ (8002204 <MX_GPIO_Init+0x140>)
 80021c0:	f000 fbf6 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c4:	2304      	movs	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	480b      	ldr	r0, [pc, #44]	@ (8002208 <MX_GPIO_Init+0x144>)
 80021da:	f000 fbe9 	bl	80029b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2008      	movs	r0, #8
 80021e4:	f000 fbad 	bl	8002942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021e8:	2008      	movs	r0, #8
 80021ea:	f000 fbc6 	bl	800297a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	@ 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020400 	.word	0x40020400
 8002204:	40020000 	.word	0x40020000
 8002208:	40020c00 	.word	0x40020c00

0800220c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <Error_Handler+0x8>

08002218 <main_function>:
int code = 0;

extern MotorController Motor_cas;
extern TIM_HandleTypeDef htim4;

void main_function(){
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

	arm_reset();
 800221c:	f7fe fdaa 	bl	8000d74 <arm_reset>
	HAL_TIM_Base_Start_IT(&htim4);
 8002220:	4803      	ldr	r0, [pc, #12]	@ (8002230 <main_function+0x18>)
 8002222:	f001 fb49 	bl	80038b8 <HAL_TIM_Base_Start_IT>
	motor_init();
 8002226:	f7ff fc51 	bl	8001acc <motor_init>
//	arm_test();
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

	while(1){
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <main_function+0x12>
 800222e:	bf00      	nop
 8002230:	2000021c 	.word	0x2000021c

08002234 <HAL_TIM_PeriodElapsedCallback>:
//		table_arm();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10d      	bne.n	8002262 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		sec++;
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800224e:	6013      	str	r3, [r2, #0]
//		motor_monitor();
		cascade_monitor(300);
 8002250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002274 <HAL_TIM_PeriodElapsedCallback+0x40>
 8002254:	f7ff fc52 	bl	8001afc <cascade_monitor>

//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
//		__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pulse);

		arm_mission(code);
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f87b 	bl	8001358 <arm_mission>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40000800 	.word	0x40000800
 8002270:	2000033c 	.word	0x2000033c
 8002274:	43960000 	.word	0x43960000
 8002278:	20000340 	.word	0x20000340

0800227c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_MspInit+0x4c>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_MspInit+0x4c>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a08      	ldr	r2, [pc, #32]	@ (80022c8 <HAL_MspInit+0x4c>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_MspInit+0x4c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_TIM_Encoder_MspInit+0x84>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002326:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002344:	f000 fb34 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010000 	.word	0x40010000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000

0800235c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_TIM_Base_MspInit+0x48>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d115      	bne.n	800239a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	201e      	movs	r0, #30
 8002390:	f000 fad7 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002394:	201e      	movs	r0, #30
 8002396:	f000 faf0 	bl	800297a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <HAL_TIM_PWM_MspInit+0x64>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023da:	e012      	b.n	8002402 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_TIM_PWM_MspInit+0x6c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10d      	bne.n	8002402 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <HAL_TIM_PWM_MspInit+0x68>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40023800 	.word	0x40023800
 8002418:	40001800 	.word	0x40001800

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <HAL_TIM_MspPostInit+0xb0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11e      	bne.n	800247c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800245a:	2303      	movs	r3, #3
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800246a:	2302      	movs	r3, #2
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4817      	ldr	r0, [pc, #92]	@ (80024d4 <HAL_TIM_MspPostInit+0xb8>)
 8002476:	f000 fa9b 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800247a:	e023      	b.n	80024c4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a15      	ldr	r2, [pc, #84]	@ (80024d8 <HAL_TIM_MspPostInit+0xbc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11e      	bne.n	80024c4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_TIM_MspPostInit+0xb4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024a2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024b4:	2309      	movs	r3, #9
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	4807      	ldr	r0, [pc, #28]	@ (80024dc <HAL_TIM_MspPostInit+0xc0>)
 80024c0:	f000 fa76 	bl	80029b0 <HAL_GPIO_Init>
}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40001800 	.word	0x40001800
 80024dc:	40020400 	.word	0x40020400

080024e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_UART_MspInit+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d14a      	bne.n	8002598 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <HAL_UART_MspInit+0xc4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002556:	2320      	movs	r3, #32
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002566:	2307      	movs	r3, #7
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <HAL_UART_MspInit+0xc8>)
 8002572:	f000 fa1d 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002588:	2307      	movs	r3, #7
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4806      	ldr	r0, [pc, #24]	@ (80025ac <HAL_UART_MspInit+0xcc>)
 8002594:	f000 fa0c 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40004800 	.word	0x40004800
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020400 	.word	0x40020400

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <NMI_Handler+0x4>

080025b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <MemManage_Handler+0x4>

080025c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002606:	f000 f8a1 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}

0800260e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002612:	2004      	movs	r0, #4
 8002614:	f000 fb7a 	bl	8002d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002620:	4802      	ldr	r0, [pc, #8]	@ (800262c <TIM4_IRQHandler+0x10>)
 8002622:	f001 fc05 	bl	8003e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000021c 	.word	0x2000021c

08002630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800268c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002658:	f7ff ffea 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800265c:	480c      	ldr	r0, [pc, #48]	@ (8002690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800265e:	490d      	ldr	r1, [pc, #52]	@ (8002694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002660:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002674:	4c0a      	ldr	r4, [pc, #40]	@ (80026a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002682:	f002 fe31 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7ff fb20 	bl	8001cca <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800268c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002698:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 800269c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80026a0:	20000348 	.word	0x20000348

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f92b 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fdce 	bl	800227c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f943 	bl	8002996 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 f90b 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000024 	.word	0x20000024
 8002744:	2000002c 	.word	0x2000002c
 8002748:	20000028 	.word	0x20000028

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000002c 	.word	0x2000002c
 8002770:	20000344 	.word	0x20000344

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000344 	.word	0x20000344

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	@ (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	@ 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff29 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff3e 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff31 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa2 	bl	80028e8 <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e165      	b.n	8002c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8154 	bne.w	8002c92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80ae 	beq.w	8002c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	@ (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x20a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x206>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a49      	ldr	r2, [pc, #292]	@ (8002cd0 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a31      	ldr	r2, [pc, #196]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae96 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d22:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f806 	bl	8002d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0cc      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d68:	4b68      	ldr	r3, [pc, #416]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d90c      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b65      	ldr	r3, [pc, #404]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b63      	ldr	r3, [pc, #396]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da8:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc0:	4b53      	ldr	r3, [pc, #332]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a52      	ldr	r2, [pc, #328]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b50      	ldr	r3, [pc, #320]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	494d      	ldr	r1, [pc, #308]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d044      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e12:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e067      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4934      	ldr	r1, [pc, #208]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e44:	f7ff fc96 	bl	8002774 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7ff fc92 	bl	8002774 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e04f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d20c      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b22      	ldr	r3, [pc, #136]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e032      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4916      	ldr	r1, [pc, #88]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490e      	ldr	r1, [pc, #56]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eda:	f000 f855 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490a      	ldr	r1, [pc, #40]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fbf6 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023c00 	.word	0x40023c00
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08005364 	.word	0x08005364
 8002f18:	20000024 	.word	0x20000024
 8002f1c:	20000028 	.word	0x20000028

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000024 	.word	0x20000024

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08005374 	.word	0x08005374

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffdc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08005374 	.word	0x08005374

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b0a6      	sub	sp, #152	@ 0x98
 8002f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4bc8      	ldr	r3, [pc, #800]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	f200 817e 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x330>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002ff9 	.word	0x08002ff9
 8002fc8:	080032b9 	.word	0x080032b9
 8002fcc:	080032b9 	.word	0x080032b9
 8002fd0:	080032b9 	.word	0x080032b9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	080032b9 	.word	0x080032b9
 8002fdc:	080032b9 	.word	0x080032b9
 8002fe0:	080032b9 	.word	0x080032b9
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	080032b9 	.word	0x080032b9
 8002fec:	080032b9 	.word	0x080032b9
 8002ff0:	080032b9 	.word	0x080032b9
 8002ff4:	08003173 	.word	0x08003173
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4bb6      	ldr	r3, [pc, #728]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ffe:	e15f      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003000:	4bb5      	ldr	r3, [pc, #724]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003006:	e15b      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4bb1      	ldr	r3, [pc, #708]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003014:	4bae      	ldr	r3, [pc, #696]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d031      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003020:	4bab      	ldr	r3, [pc, #684]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	2200      	movs	r2, #0
 8003028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800302a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800302c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	663b      	str	r3, [r7, #96]	@ 0x60
 8003034:	2300      	movs	r3, #0
 8003036:	667b      	str	r3, [r7, #100]	@ 0x64
 8003038:	4ba7      	ldr	r3, [pc, #668]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800303a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800303e:	462a      	mov	r2, r5
 8003040:	fb03 f202 	mul.w	r2, r3, r2
 8003044:	2300      	movs	r3, #0
 8003046:	4621      	mov	r1, r4
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	4aa2      	ldr	r2, [pc, #648]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003050:	4621      	mov	r1, r4
 8003052:	fba1 1202 	umull	r1, r2, r1, r2
 8003056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003058:	460a      	mov	r2, r1
 800305a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800305c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800305e:	4413      	add	r3, r2
 8003060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003066:	2200      	movs	r2, #0
 8003068:	65bb      	str	r3, [r7, #88]	@ 0x58
 800306a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003070:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003074:	f7fd fce6 	bl	8000a44 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003082:	e064      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4b92      	ldr	r3, [pc, #584]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	2200      	movs	r2, #0
 800308c:	653b      	str	r3, [r7, #80]	@ 0x50
 800308e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003098:	2300      	movs	r3, #0
 800309a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800309c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80030a0:	4622      	mov	r2, r4
 80030a2:	462b      	mov	r3, r5
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	0159      	lsls	r1, r3, #5
 80030ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b2:	0150      	lsls	r0, r2, #5
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4621      	mov	r1, r4
 80030ba:	1a51      	subs	r1, r2, r1
 80030bc:	6139      	str	r1, [r7, #16]
 80030be:	4629      	mov	r1, r5
 80030c0:	eb63 0301 	sbc.w	r3, r3, r1
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d2:	4659      	mov	r1, fp
 80030d4:	018b      	lsls	r3, r1, #6
 80030d6:	4651      	mov	r1, sl
 80030d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030dc:	4651      	mov	r1, sl
 80030de:	018a      	lsls	r2, r1, #6
 80030e0:	4651      	mov	r1, sl
 80030e2:	ebb2 0801 	subs.w	r8, r2, r1
 80030e6:	4659      	mov	r1, fp
 80030e8:	eb63 0901 	sbc.w	r9, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003100:	4690      	mov	r8, r2
 8003102:	4699      	mov	r9, r3
 8003104:	4623      	mov	r3, r4
 8003106:	eb18 0303 	adds.w	r3, r8, r3
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	462b      	mov	r3, r5
 800310e:	eb49 0303 	adc.w	r3, r9, r3
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003120:	4629      	mov	r1, r5
 8003122:	028b      	lsls	r3, r1, #10
 8003124:	4621      	mov	r1, r4
 8003126:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312a:	4621      	mov	r1, r4
 800312c:	028a      	lsls	r2, r1, #10
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003136:	2200      	movs	r2, #0
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
 800313a:	647a      	str	r2, [r7, #68]	@ 0x44
 800313c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003140:	f7fd fc80 	bl	8000a44 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800314e:	4b60      	ldr	r3, [pc, #384]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	3301      	adds	r3, #1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003160:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003170:	e0a6      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003172:	4b57      	ldr	r3, [pc, #348]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800317e:	4b54      	ldr	r3, [pc, #336]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02a      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318a:	4b51      	ldr	r3, [pc, #324]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	2200      	movs	r2, #0
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003194:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800319c:	2100      	movs	r1, #0
 800319e:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80031a0:	fb03 f201 	mul.w	r2, r3, r1
 80031a4:	2300      	movs	r3, #0
 80031a6:	fb00 f303 	mul.w	r3, r0, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	4a4a      	ldr	r2, [pc, #296]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80031ae:	fba0 1202 	umull	r1, r2, r0, r2
 80031b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80031b4:	460a      	mov	r2, r1
 80031b6:	673a      	str	r2, [r7, #112]	@ 0x70
 80031b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031ba:	4413      	add	r3, r2
 80031bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c2:	2200      	movs	r2, #0
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80031c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80031cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80031d0:	f7fd fc38 	bl	8000a44 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031de:	e05b      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e0:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	2200      	movs	r2, #0
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	f04f 0000 	mov.w	r0, #0
 8003204:	f04f 0100 	mov.w	r1, #0
 8003208:	0159      	lsls	r1, r3, #5
 800320a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320e:	0150      	lsls	r0, r2, #5
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4641      	mov	r1, r8
 8003216:	ebb2 0a01 	subs.w	sl, r2, r1
 800321a:	4649      	mov	r1, r9
 800321c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800322c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003234:	ebb2 040a 	subs.w	r4, r2, sl
 8003238:	eb63 050b 	sbc.w	r5, r3, fp
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	00eb      	lsls	r3, r5, #3
 8003246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324a:	00e2      	lsls	r2, r4, #3
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	4643      	mov	r3, r8
 8003252:	18e3      	adds	r3, r4, r3
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	464b      	mov	r3, r9
 8003258:	eb45 0303 	adc.w	r3, r5, r3
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326a:	4629      	mov	r1, r5
 800326c:	028b      	lsls	r3, r1, #10
 800326e:	4621      	mov	r1, r4
 8003270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003274:	4621      	mov	r1, r4
 8003276:	028a      	lsls	r2, r1, #10
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003280:	2200      	movs	r2, #0
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328a:	f7fd fbdb 	bl	8000a44 <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4613      	mov	r3, r2
 8003294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003298:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0f1b      	lsrs	r3, r3, #28
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80032a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032b6:	e003      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3798      	adds	r7, #152	@ 0x98
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840

080032dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e28d      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8083 	beq.w	8003402 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032fc:	4b94      	ldr	r3, [pc, #592]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b04      	cmp	r3, #4
 8003306:	d019      	beq.n	800333c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003308:	4b91      	ldr	r3, [pc, #580]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003310:	2b08      	cmp	r3, #8
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003314:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b8b      	ldr	r3, [pc, #556]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4b84      	ldr	r3, [pc, #528]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <HAL_RCC_OscConfig+0x124>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d157      	bne.n	8003400 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e25a      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x90>
 800335e:	4b7c      	ldr	r3, [pc, #496]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7b      	ldr	r2, [pc, #492]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xcc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0xb4>
 8003376:	4b76      	ldr	r3, [pc, #472]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b73      	ldr	r3, [pc, #460]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a72      	ldr	r2, [pc, #456]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xcc>
 8003390:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6e      	ldr	r2, [pc, #440]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7ff f9e0 	bl	8002774 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7ff f9dc 	bl	8002774 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	@ 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e21f      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xdc>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7ff f9cc 	bl	8002774 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7ff f9c8 	bl	8002774 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e20b      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b57      	ldr	r3, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x104>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d06f      	beq.n	80034ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340e:	4b50      	ldr	r3, [pc, #320]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d017      	beq.n	800344a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800341a:	4b4d      	ldr	r3, [pc, #308]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003422:	2b08      	cmp	r3, #8
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003426:	4b4a      	ldr	r3, [pc, #296]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b44      	ldr	r3, [pc, #272]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x186>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1d3      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4937      	ldr	r1, [pc, #220]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e03a      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b34      	ldr	r3, [pc, #208]	@ (8003554 <HAL_RCC_OscConfig+0x278>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7ff f975 	bl	8002774 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348e:	f7ff f971 	bl	8002774 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1b4      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b28      	ldr	r3, [pc, #160]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4925      	ldr	r1, [pc, #148]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x278>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7ff f954 	bl	8002774 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d0:	f7ff f950 	bl	8002774 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e193      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d036      	beq.n	8003568 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCC_OscConfig+0x27c>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7ff f934 	bl	8002774 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003510:	f7ff f930 	bl	8002774 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e173      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x234>
 800352e:	e01b      	b.n	8003568 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_OscConfig+0x27c>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7ff f91d 	bl	8002774 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	e00e      	b.n	800355c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353e:	f7ff f919 	bl	8002774 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d907      	bls.n	800355c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e15c      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
 8003550:	40023800 	.word	0x40023800
 8003554:	42470000 	.word	0x42470000
 8003558:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b8a      	ldr	r3, [pc, #552]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ea      	bne.n	800353e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8097 	beq.w	80036a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b83      	ldr	r3, [pc, #524]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	4b7f      	ldr	r3, [pc, #508]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	4a7e      	ldr	r2, [pc, #504]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	@ 0x40
 8003596:	4b7c      	ldr	r3, [pc, #496]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b79      	ldr	r3, [pc, #484]	@ (800378c <HAL_RCC_OscConfig+0x4b0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d118      	bne.n	80035e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b76      	ldr	r3, [pc, #472]	@ (800378c <HAL_RCC_OscConfig+0x4b0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a75      	ldr	r2, [pc, #468]	@ (800378c <HAL_RCC_OscConfig+0x4b0>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7ff f8d9 	bl	8002774 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7ff f8d5 	bl	8002774 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e118      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b6c      	ldr	r3, [pc, #432]	@ (800378c <HAL_RCC_OscConfig+0x4b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x31e>
 80035ec:	4b66      	ldr	r3, [pc, #408]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a65      	ldr	r2, [pc, #404]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x358>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x340>
 8003602:	4b61      	ldr	r3, [pc, #388]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	4a60      	ldr	r2, [pc, #384]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	@ 0x70
 800360e:	4b5e      	ldr	r3, [pc, #376]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	4a5d      	ldr	r2, [pc, #372]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	@ 0x70
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0x358>
 800361c:	4b5a      	ldr	r3, [pc, #360]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003620:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	@ 0x70
 8003628:	4b57      	ldr	r3, [pc, #348]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a56      	ldr	r2, [pc, #344]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7ff f89a 	bl	8002774 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7ff f896 	bl	8002774 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0d7      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ee      	beq.n	8003644 <HAL_RCC_OscConfig+0x368>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7ff f884 	bl	8002774 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7ff f880 	bl	8002774 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0c1      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	4b40      	ldr	r3, [pc, #256]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ee      	bne.n	8003670 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b3b      	ldr	r3, [pc, #236]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	4a3a      	ldr	r2, [pc, #232]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80ad 	beq.w	8003808 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ae:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d060      	beq.n	800377c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d145      	bne.n	800374e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b33      	ldr	r3, [pc, #204]	@ (8003790 <HAL_RCC_OscConfig+0x4b4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7ff f854 	bl	8002774 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7ff f850 	bl	8002774 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e093      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b29      	ldr	r3, [pc, #164]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	491b      	ldr	r1, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCC_OscConfig+0x4b4>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7ff f825 	bl	8002774 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372e:	f7ff f821 	bl	8002774 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e064      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x452>
 800374c:	e05c      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_RCC_OscConfig+0x4b4>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7ff f80e 	bl	8002774 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7ff f80a 	bl	8002774 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e04d      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_OscConfig+0x4ac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x480>
 800377a:	e045      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e040      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
 8003790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003794:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <HAL_RCC_OscConfig+0x538>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d030      	beq.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d129      	bne.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d122      	bne.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d119      	bne.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d10f      	bne.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e041      	b.n	80038ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fd8c 	bl	800235c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 fd8c 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04e      	b.n	800396e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	@ (800397c <HAL_TIM_Base_Start_IT+0xc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fa:	d01d      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <HAL_TIM_Base_Start_IT+0xc8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <HAL_TIM_Base_Start_IT+0xcc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_TIM_Base_Start_IT+0xd0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <HAL_TIM_Base_Start_IT+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <HAL_TIM_Base_Start_IT+0xd8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_TIM_Base_Start_IT+0xdc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d010      	beq.n	800396c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	e007      	b.n	800396c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40010400 	.word	0x40010400
 8003990:	40014000 	.word	0x40014000
 8003994:	40001800 	.word	0x40001800

08003998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fcf4 	bl	80023ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 fccc 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_TIM_PWM_Start+0x24>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e022      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d109      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x3e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	bf14      	ite	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	2300      	moveq	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	e015      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d109      	bne.n	8003a90 <HAL_TIM_PWM_Start+0x58>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e008      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07c      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0x82>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab8:	e013      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0x92>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac8:	e00b      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad8:	e003      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 ff32 	bl	8004954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	@ (8003bac <HAL_TIM_PWM_Start+0x174>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIM_PWM_Start+0xcc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb0 <HAL_TIM_PWM_Start+0x178>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_PWM_Start+0xd0>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_TIM_PWM_Start+0xd2>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a22      	ldr	r2, [pc, #136]	@ (8003bac <HAL_TIM_PWM_Start+0x174>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b30:	d01d      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb4 <HAL_TIM_PWM_Start+0x17c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_TIM_PWM_Start+0x180>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <HAL_TIM_PWM_Start+0x184>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_TIM_PWM_Start+0x178>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_TIM_PWM_Start+0x188>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <HAL_TIM_PWM_Start+0x18c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d010      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40001800 	.word	0x40001800

08003bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e097      	b.n	8003d0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe fb6b 	bl	80022cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c0c:	f023 0307 	bic.w	r3, r3, #7
 8003c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f000 fba9 	bl	8004374 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003c68:	f023 030c 	bic.w	r3, r3, #12
 8003c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	4313      	orrs	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	011a      	lsls	r2, r3, #4
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	031b      	lsls	r3, r3, #12
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d110      	bne.n	8003d66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d4a:	7b7b      	ldrb	r3, [r7, #13]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e069      	b.n	8003e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d64:	e031      	b.n	8003dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d110      	bne.n	8003d8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d102      	bne.n	8003d78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d72:	7b3b      	ldrb	r3, [r7, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e055      	b.n	8003e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d8c:	e01d      	b.n	8003dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d105      	bne.n	8003da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d9a:	7b7b      	ldrb	r3, [r7, #13]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003da0:	7b3b      	ldrb	r3, [r7, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03e      	b.n	8003e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_Encoder_Start+0xc4>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d008      	beq.n	8003de8 <HAL_TIM_Encoder_Start+0xd4>
 8003dd6:	e00f      	b.n	8003df8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fdb7 	bl	8004954 <TIM_CCxChannelCmd>
      break;
 8003de6:	e016      	b.n	8003e16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	2104      	movs	r1, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fdaf 	bl	8004954 <TIM_CCxChannelCmd>
      break;
 8003df6:	e00e      	b.n	8003e16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fda7 	bl	8004954 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fda0 	bl	8004954 <TIM_CCxChannelCmd>
      break;
 8003e14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa5b 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa4d 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa5e 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0204 	mvn.w	r2, #4
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa35 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa27 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa38 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d020      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa0f 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa01 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fa12 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0210 	mvn.w	r2, #16
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9e9 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9db 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f9ec 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0201 	mvn.w	r2, #1
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe f94c 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd76 	bl	8004aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9bd 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0220 	mvn.w	r2, #32
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fd48 	bl	8004a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e0ae      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	f200 809f 	bhi.w	800417c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800403e:	a201      	add	r2, pc, #4	@ (adr r2, 8004044 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004079 	.word	0x08004079
 8004048:	0800417d 	.word	0x0800417d
 800404c:	0800417d 	.word	0x0800417d
 8004050:	0800417d 	.word	0x0800417d
 8004054:	080040b9 	.word	0x080040b9
 8004058:	0800417d 	.word	0x0800417d
 800405c:	0800417d 	.word	0x0800417d
 8004060:	0800417d 	.word	0x0800417d
 8004064:	080040fb 	.word	0x080040fb
 8004068:	0800417d 	.word	0x0800417d
 800406c:	0800417d 	.word	0x0800417d
 8004070:	0800417d 	.word	0x0800417d
 8004074:	0800413b 	.word	0x0800413b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa1e 	bl	80044c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0208 	orr.w	r2, r2, #8
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	619a      	str	r2, [r3, #24]
      break;
 80040b6:	e064      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fa6e 	bl	80045a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6999      	ldr	r1, [r3, #24]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]
      break;
 80040f8:	e043      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fac3 	bl	800468c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0208 	orr.w	r2, r2, #8
 8004114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0204 	bic.w	r2, r2, #4
 8004124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	61da      	str	r2, [r3, #28]
      break;
 8004138:	e023      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fb17 	bl	8004774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69d9      	ldr	r1, [r3, #28]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	021a      	lsls	r2, r3, #8
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	61da      	str	r2, [r3, #28]
      break;
 800417a:	e002      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
      break;
 8004180:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_TIM_ConfigClockSource+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0b4      	b.n	800431a <HAL_TIM_ConfigClockSource+0x186>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e8:	d03e      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0xd4>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ee:	f200 8087 	bhi.w	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f6:	f000 8086 	beq.w	8004306 <HAL_TIM_ConfigClockSource+0x172>
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fe:	d87f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d01a      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xa6>
 8004204:	2b70      	cmp	r3, #112	@ 0x70
 8004206:	d87b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d050      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x11a>
 800420c:	2b60      	cmp	r3, #96	@ 0x60
 800420e:	d877      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b50      	cmp	r3, #80	@ 0x50
 8004212:	d03c      	beq.n	800428e <HAL_TIM_ConfigClockSource+0xfa>
 8004214:	2b50      	cmp	r3, #80	@ 0x50
 8004216:	d873      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d058      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x13a>
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d86f      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b30      	cmp	r3, #48	@ 0x30
 8004222:	d064      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004224:	2b30      	cmp	r3, #48	@ 0x30
 8004226:	d86b      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d060      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d867      	bhi.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	2b10      	cmp	r3, #16
 8004236:	d05a      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x15a>
 8004238:	e062      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	f000 fb63 	bl	8004914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800425c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	609a      	str	r2, [r3, #8]
      break;
 8004266:	e04f      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004278:	f000 fb4c 	bl	8004914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800428a:	609a      	str	r2, [r3, #8]
      break;
 800428c:	e03c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	461a      	mov	r2, r3
 800429c:	f000 fac0 	bl	8004820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2150      	movs	r1, #80	@ 0x50
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fb19 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80042ac:	e02c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fadf 	bl	800487e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2160      	movs	r1, #96	@ 0x60
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fb09 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80042cc:	e01c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 faa0 	bl	8004820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	@ 0x40
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 faf9 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80042ec:	e00c      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 faf0 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80042fe:	e003      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e000      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a43      	ldr	r2, [pc, #268]	@ (8004494 <TIM_Base_SetConfig+0x120>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <TIM_Base_SetConfig+0x128>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <TIM_Base_SetConfig+0x12c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	@ (80044a4 <TIM_Base_SetConfig+0x130>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a32      	ldr	r2, [pc, #200]	@ (8004494 <TIM_Base_SetConfig+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004498 <TIM_Base_SetConfig+0x124>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2e      	ldr	r2, [pc, #184]	@ (800449c <TIM_Base_SetConfig+0x128>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	@ (80044a0 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2b      	ldr	r2, [pc, #172]	@ (80044a8 <TIM_Base_SetConfig+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2a      	ldr	r2, [pc, #168]	@ (80044ac <TIM_Base_SetConfig+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a29      	ldr	r2, [pc, #164]	@ (80044b0 <TIM_Base_SetConfig+0x13c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a28      	ldr	r2, [pc, #160]	@ (80044b4 <TIM_Base_SetConfig+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a27      	ldr	r2, [pc, #156]	@ (80044b8 <TIM_Base_SetConfig+0x144>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <TIM_Base_SetConfig+0x148>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a0e      	ldr	r2, [pc, #56]	@ (8004494 <TIM_Base_SetConfig+0x120>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d003      	beq.n	8004466 <TIM_Base_SetConfig+0xf2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a10      	ldr	r2, [pc, #64]	@ (80044a4 <TIM_Base_SetConfig+0x130>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d103      	bne.n	800446e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f043 0204 	orr.w	r2, r3, #4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	40001800 	.word	0x40001800
 80044b8:	40001c00 	.word	0x40001c00
 80044bc:	40002000 	.word	0x40002000

080044c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0201 	bic.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0302 	bic.w	r3, r3, #2
 8004508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a20      	ldr	r2, [pc, #128]	@ (8004598 <TIM_OC1_SetConfig+0xd8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_OC1_SetConfig+0x64>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <TIM_OC1_SetConfig+0xdc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10c      	bne.n	800453e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0308 	bic.w	r3, r3, #8
 800452a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a15      	ldr	r2, [pc, #84]	@ (8004598 <TIM_OC1_SetConfig+0xd8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_OC1_SetConfig+0x8e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	@ (800459c <TIM_OC1_SetConfig+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d111      	bne.n	8004572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400

080045a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 0210 	bic.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0320 	bic.w	r3, r3, #32
 80045ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <TIM_OC2_SetConfig+0xe4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC2_SetConfig+0x68>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <TIM_OC2_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10d      	bne.n	8004624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <TIM_OC2_SetConfig+0xe4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC2_SetConfig+0x94>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <TIM_OC2_SetConfig+0xe8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d113      	bne.n	800465c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40010400 	.word	0x40010400

0800468c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a21      	ldr	r2, [pc, #132]	@ (800476c <TIM_OC3_SetConfig+0xe0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC3_SetConfig+0x66>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <TIM_OC3_SetConfig+0xe4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10d      	bne.n	800470e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800470c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a16      	ldr	r2, [pc, #88]	@ (800476c <TIM_OC3_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC3_SetConfig+0x92>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <TIM_OC3_SetConfig+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d113      	bne.n	8004746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	031b      	lsls	r3, r3, #12
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <TIM_OC4_SetConfig+0xa4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC4_SetConfig+0x68>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a11      	ldr	r2, [pc, #68]	@ (800481c <TIM_OC4_SetConfig+0xa8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d109      	bne.n	80047f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	019b      	lsls	r3, r3, #6
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400

08004820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0201 	bic.w	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800484a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 030a 	bic.w	r3, r3, #10
 800485c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 0210 	bic.w	r2, r3, #16
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f043 0307 	orr.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800492e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2201      	movs	r2, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1a      	ldr	r2, [r3, #32]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e05a      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a21      	ldr	r2, [pc, #132]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d01d      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a18      	ldr	r2, [pc, #96]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40010400 	.word	0x40010400
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40001800 	.word	0x40001800

08004a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e042      	b.n	8004b58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd fcfa 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	@ 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f973 	bl	8004df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	@ 0x28
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d175      	bne.n	8004c6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Transmit+0x2c>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e06e      	b.n	8004c6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2221      	movs	r2, #33	@ 0x21
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b9e:	f7fd fde9 	bl	8002774 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb8:	d108      	bne.n	8004bcc <HAL_UART_Transmit+0x6c>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	e003      	b.n	8004bd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bd4:	e02e      	b.n	8004c34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	@ 0x80
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f848 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e03a      	b.n	8004c6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	3302      	adds	r3, #2
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	e007      	b.n	8004c26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3301      	adds	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1cb      	bne.n	8004bd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2140      	movs	r1, #64	@ 0x40
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f814 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	e03b      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d037      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fd fd70 	bl	8002774 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e03a      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d020      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d01d      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d116      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f81d 	bl	8004d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e00f      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0b4      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b095      	sub	sp, #84	@ 0x54
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d119      	bne.n	8004dd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f023 0310 	bic.w	r3, r3, #16
 8004db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc0:	61ba      	str	r2, [r7, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004de2:	bf00      	nop
 8004de4:	3754      	adds	r7, #84	@ 0x54
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b0c0      	sub	sp, #256	@ 0x100
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	68d9      	ldr	r1, [r3, #12]
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	ea40 0301 	orr.w	r3, r0, r1
 8004e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e48:	f021 010c 	bic.w	r1, r1, #12
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e56:	430b      	orrs	r3, r1
 8004e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	6999      	ldr	r1, [r3, #24]
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	ea40 0301 	orr.w	r3, r0, r1
 8004e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b8f      	ldr	r3, [pc, #572]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d005      	beq.n	8004e90 <UART_SetConfig+0xa0>
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80050c0 <UART_SetConfig+0x2d0>)
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d104      	bne.n	8004e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7fe f866 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8004e94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e98:	e003      	b.n	8004ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9a:	f7fe f84d 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8004e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eac:	f040 810c 	bne.w	80050c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	1891      	adds	r1, r2, r2
 8004ec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eca:	415b      	adcs	r3, r3
 8004ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	eb12 0801 	adds.w	r8, r2, r1
 8004ed8:	4629      	mov	r1, r5
 8004eda:	eb43 0901 	adc.w	r9, r3, r1
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef2:	4690      	mov	r8, r2
 8004ef4:	4699      	mov	r9, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	eb18 0303 	adds.w	r3, r8, r3
 8004efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f00:	462b      	mov	r3, r5
 8004f02:	eb49 0303 	adc.w	r3, r9, r3
 8004f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f1e:	460b      	mov	r3, r1
 8004f20:	18db      	adds	r3, r3, r3
 8004f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f24:	4613      	mov	r3, r2
 8004f26:	eb42 0303 	adc.w	r3, r2, r3
 8004f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f34:	f7fb fd86 	bl	8000a44 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b61      	ldr	r3, [pc, #388]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	011c      	lsls	r4, r3, #4
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f60:	415b      	adcs	r3, r3
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f68:	4641      	mov	r1, r8
 8004f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f6e:	4649      	mov	r1, r9
 8004f70:	eb43 0b01 	adc.w	fp, r3, r1
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f88:	4692      	mov	sl, r2
 8004f8a:	469b      	mov	fp, r3
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f96:	464b      	mov	r3, r9
 8004f98:	eb4b 0303 	adc.w	r3, fp, r3
 8004f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fba:	4613      	mov	r3, r2
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fca:	f7fb fd3b 	bl	8000a44 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2264      	movs	r2, #100	@ 0x64
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	1acb      	subs	r3, r1, r3
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fea:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004fec:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ff8:	441c      	add	r4, r3
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005014:	415b      	adcs	r3, r3
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6339      	str	r1, [r7, #48]	@ 0x30
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005050:	464b      	mov	r3, r9
 8005052:	460a      	mov	r2, r1
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800506c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005070:	460b      	mov	r3, r1
 8005072:	18db      	adds	r3, r3, r3
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005076:	4613      	mov	r3, r2
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800507e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005086:	f7fb fcdd 	bl	8000a44 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8005090:	fba3 1302 	umull	r1, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	2164      	movs	r1, #100	@ 0x64
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3332      	adds	r3, #50	@ 0x32
 80050a2:	4a08      	ldr	r2, [pc, #32]	@ (80050c4 <UART_SetConfig+0x2d4>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f003 0207 	and.w	r2, r3, #7
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4422      	add	r2, r4
 80050b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050b8:	e106      	b.n	80052c8 <UART_SetConfig+0x4d8>
 80050ba:	bf00      	nop
 80050bc:	40011000 	.word	0x40011000
 80050c0:	40011400 	.word	0x40011400
 80050c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050da:	4642      	mov	r2, r8
 80050dc:	464b      	mov	r3, r9
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	6239      	str	r1, [r7, #32]
 80050e2:	415b      	adcs	r3, r3
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ea:	4641      	mov	r1, r8
 80050ec:	1854      	adds	r4, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb43 0501 	adc.w	r5, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	00eb      	lsls	r3, r5, #3
 80050fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005102:	00e2      	lsls	r2, r4, #3
 8005104:	4614      	mov	r4, r2
 8005106:	461d      	mov	r5, r3
 8005108:	4643      	mov	r3, r8
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005110:	464b      	mov	r3, r9
 8005112:	eb45 0303 	adc.w	r3, r5, r3
 8005116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005136:	4629      	mov	r1, r5
 8005138:	008b      	lsls	r3, r1, #2
 800513a:	4621      	mov	r1, r4
 800513c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005140:	4621      	mov	r1, r4
 8005142:	008a      	lsls	r2, r1, #2
 8005144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005148:	f7fb fc7c 	bl	8000a44 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b60      	ldr	r3, [pc, #384]	@ (80052d4 <UART_SetConfig+0x4e4>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	011c      	lsls	r4, r3, #4
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	61b9      	str	r1, [r7, #24]
 8005174:	415b      	adcs	r3, r3
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517c:	4641      	mov	r1, r8
 800517e:	1851      	adds	r1, r2, r1
 8005180:	6139      	str	r1, [r7, #16]
 8005182:	4649      	mov	r1, r9
 8005184:	414b      	adcs	r3, r1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005194:	4659      	mov	r1, fp
 8005196:	00cb      	lsls	r3, r1, #3
 8005198:	4651      	mov	r1, sl
 800519a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800519e:	4651      	mov	r1, sl
 80051a0:	00ca      	lsls	r2, r1, #3
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	4642      	mov	r2, r8
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b0:	464b      	mov	r3, r9
 80051b2:	460a      	mov	r2, r1
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051d4:	4649      	mov	r1, r9
 80051d6:	008b      	lsls	r3, r1, #2
 80051d8:	4641      	mov	r1, r8
 80051da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051de:	4641      	mov	r1, r8
 80051e0:	008a      	lsls	r2, r1, #2
 80051e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051e6:	f7fb fc2d 	bl	8000a44 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	4b38      	ldr	r3, [pc, #224]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80051f2:	fba3 2301 	umull	r2, r3, r3, r1
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2264      	movs	r2, #100	@ 0x64
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	@ 0x32
 8005204:	4a33      	ldr	r2, [pc, #204]	@ (80052d4 <UART_SetConfig+0x4e4>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005210:	441c      	add	r4, r3
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	673b      	str	r3, [r7, #112]	@ 0x70
 800521a:	677a      	str	r2, [r7, #116]	@ 0x74
 800521c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	415b      	adcs	r3, r3
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005262:	464b      	mov	r3, r9
 8005264:	460a      	mov	r2, r1
 8005266:	eb42 0303 	adc.w	r3, r2, r3
 800526a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	663b      	str	r3, [r7, #96]	@ 0x60
 8005276:	667a      	str	r2, [r7, #100]	@ 0x64
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005284:	4649      	mov	r1, r9
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528e:	4641      	mov	r1, r8
 8005290:	008a      	lsls	r2, r1, #2
 8005292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005296:	f7fb fbd5 	bl	8000a44 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80052a0:	fba3 1302 	umull	r1, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2164      	movs	r1, #100	@ 0x64
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	3332      	adds	r3, #50	@ 0x32
 80052b2:	4a08      	ldr	r2, [pc, #32]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4422      	add	r2, r4
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d4:	51eb851f 	.word	0x51eb851f

080052d8 <memset>:
 80052d8:	4402      	add	r2, r0
 80052da:	4603      	mov	r3, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	d100      	bne.n	80052e2 <memset+0xa>
 80052e0:	4770      	bx	lr
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	e7f9      	b.n	80052dc <memset+0x4>

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005320 <__libc_init_array+0x38>)
 80052ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005324 <__libc_init_array+0x3c>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	2600      	movs	r6, #0
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005328 <__libc_init_array+0x40>)
 80052fa:	4c0c      	ldr	r4, [pc, #48]	@ (800532c <__libc_init_array+0x44>)
 80052fc:	f000 f826 	bl	800534c <_init>
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	2600      	movs	r6, #0
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f855 3b04 	ldr.w	r3, [r5], #4
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08005384 	.word	0x08005384
 8005324:	08005384 	.word	0x08005384
 8005328:	08005384 	.word	0x08005384
 800532c:	08005390 	.word	0x08005390

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
