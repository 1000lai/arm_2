
arm_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800303c  0800303c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  0800303c  0800303c  0000403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003044  08003044  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003050  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000010  08003060  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003060  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e2  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa5  00000000  00000000  00013922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000158c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c8  00000000  00000000  00016548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002452a  00000000  00000000  00016f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f744  00000000  00000000  0003b43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d39b0  00000000  00000000  0004ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e52e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  0011e574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00121a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800300c 	.word	0x0800300c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800300c 	.word	0x0800300c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8000500:	1cfb      	adds	r3, r7, #3
 8000502:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000504:	2364      	movs	r3, #100	@ 0x64
 8000506:	2201      	movs	r2, #1
 8000508:	68f9      	ldr	r1, [r7, #12]
 800050a:	4807      	ldr	r0, [pc, #28]	@ (8000528 <_ZN10UART_servo9UART_SendEh+0x34>)
 800050c:	f002 f988 	bl	8002820 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	461a      	mov	r2, r3
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <_ZN10UART_servo9UART_SendEh+0x38>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <_ZN10UART_servo9UART_SendEh+0x38>)
 800051e:	801a      	strh	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000c0 	.word	0x200000c0
 800052c:	2000002c 	.word	0x2000002c

08000530 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	817b      	strh	r3, [r7, #10]
 8000542:	460b      	mov	r3, r1
 8000544:	813b      	strh	r3, [r7, #8]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 800054a:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3b80      	subs	r3, #128	@ 0x80
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f7ff ffca 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8000560:	2183      	movs	r1, #131	@ 0x83
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ffc6 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8000568:	2105      	movs	r1, #5
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff ffc2 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000570:	893b      	ldrh	r3, [r7, #8]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f7ff ffb7 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000586:	893b      	ldrh	r3, [r7, #8]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4619      	mov	r1, r3
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f7ff ffb1 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff ffa6 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff ffa0 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f7ff ff99 	bl	80004f4 <_ZN10UART_servo9UART_SendEh>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	8819      	ldrh	r1, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	00d2      	lsls	r2, r2, #3
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	891b      	ldrh	r3, [r3, #8]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff9b 	bl	8000530 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
	pos = _pos;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	605a      	str	r2, [r3, #4]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fbd5 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f80d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f945 	bl	80008b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062e:	f000 f919 	bl	8000864 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000632:	f000 f867 	bl	8000704 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000636:	f000 f8bd 	bl	80007b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 800063a:	f000 f999 	bl	8000970 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0x20>
	...

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fca0 	bl	8002f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a22      	ldr	r2, [pc, #136]	@ (80006fc <SystemClock_Config+0xb8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <SystemClock_Config+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <SystemClock_Config+0xbc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <SystemClock_Config+0xbc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f939 	bl	8001930 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c4:	f000 f92e 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fe60 	bl	80013a8 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f919 	bl	8000924 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2224      	movs	r2, #36	@ 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fc40 	bl	8002f98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000720:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000722:	4a23      	ldr	r2, [pc, #140]	@ (80007b0 <MX_TIM1_Init+0xac>)
 8000724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <MX_TIM1_Init+0xa8>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000732:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <MX_TIM1_Init+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800074c:	2303      	movs	r3, #3
 800074e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000764:	2301      	movs	r3, #1
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000778:	f001 fbc7 	bl	8001f0a <HAL_TIM_Encoder_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000782:	f000 f8cf 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	@ (80007ac <MX_TIM1_Init+0xa8>)
 8000794:	f001 ff78 	bl	8002688 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800079e:	f000 f8c1 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3730      	adds	r7, #48	@ 0x30
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000030 	.word	0x20000030
 80007b0:	40010000 	.word	0x40010000

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d6:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_TIM2_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007fe:	4818      	ldr	r0, [pc, #96]	@ (8000860 <MX_TIM2_Init+0xac>)
 8000800:	f001 fb34 	bl	8001e6c <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800080a:	f000 f88b 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4619      	mov	r1, r3
 800081c:	4810      	ldr	r0, [pc, #64]	@ (8000860 <MX_TIM2_Init+0xac>)
 800081e:	f001 ff33 	bl	8002688 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000828:	f000 f87c 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	@ 0x60
 800082e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <MX_TIM2_Init+0xac>)
 8000844:	f001 fc08 	bl	8002058 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800084e:	f000 f869 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <MX_TIM2_Init+0xac>)
 8000854:	f000 f9b0 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000078 	.word	0x20000078

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 8000870:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <MX_USART3_UART_Init+0x50>)
 8000872:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 8000888:	220c      	movs	r2, #12
 800088a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_USART3_UART_Init+0x48>)
 800089a:	f001 ff71 	bl	8002780 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80008a4:	f000 f83e 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	40004800 	.word	0x40004800
 80008b4:	0007a120 	.word	0x0007a120

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a16      	ldr	r2, [pc, #88]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <MX_GPIO_Init+0x68>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_GPIO_Init+0x68>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
	UART_servo(uint16_t id,uint16_t _reflect_time,UART_HandleTypeDef _servo_uart){
 8000930:	b082      	sub	sp, #8
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
 8000940:	4613      	mov	r3, r2
 8000942:	803b      	strh	r3, [r7, #0]
			motorId = id;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	887a      	ldrh	r2, [r7, #2]
 8000948:	801a      	strh	r2, [r3, #0]
			reflectime = _reflect_time;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	883a      	ldrh	r2, [r7, #0]
 800094e:	811a      	strh	r2, [r3, #8]
			servo_uart = _servo_uart;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	330c      	adds	r3, #12
 8000954:	f107 0114 	add.w	r1, r7, #20
 8000958:	2248      	movs	r2, #72	@ 0x48
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fb48 	bl	8002ff0 <memcpy>
		};
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800096c:	b002      	add	sp, #8
 800096e:	4770      	bx	lr

08000970 <main_function>:
UART_servo servo1(1,1000,huart3);
UART_servo servo2(3,1000,huart3);
UART_servo servo3(4,1000,huart3);
UART_servo servo4(5,1000,huart3);
int pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 30, a = 0; //pos4不能小於10
void main_function(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	while(1){
		servo1.update_pos(pos1);
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <main_function+0x50>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <main_function+0x54>)
 800097c:	f7ff fe41 	bl	8000602 <_ZN10UART_servo10update_posEi>
		servo2.update_pos(pos2);
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <main_function+0x58>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	@ (80009cc <main_function+0x5c>)
 8000988:	f7ff fe3b 	bl	8000602 <_ZN10UART_servo10update_posEi>
		servo3.update_pos(pos3);
 800098c:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <main_function+0x60>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	4810      	ldr	r0, [pc, #64]	@ (80009d4 <main_function+0x64>)
 8000994:	f7ff fe35 	bl	8000602 <_ZN10UART_servo10update_posEi>
		servo4.update_pos(pos4);
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <main_function+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	@ (80009dc <main_function+0x6c>)
 80009a0:	f7ff fe2f 	bl	8000602 <_ZN10UART_servo10update_posEi>

		servo1.run();
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <main_function+0x54>)
 80009a6:	f7ff fe13 	bl	80005d0 <_ZN10UART_servo3runEv>
		servo2.run();
 80009aa:	4808      	ldr	r0, [pc, #32]	@ (80009cc <main_function+0x5c>)
 80009ac:	f7ff fe10 	bl	80005d0 <_ZN10UART_servo3runEv>
		servo3.run();
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <main_function+0x64>)
 80009b2:	f7ff fe0d 	bl	80005d0 <_ZN10UART_servo3runEv>
		servo4.run();
 80009b6:	4809      	ldr	r0, [pc, #36]	@ (80009dc <main_function+0x6c>)
 80009b8:	f7ff fe0a 	bl	80005d0 <_ZN10UART_servo3runEv>
		servo1.update_pos(pos1);
 80009bc:	bf00      	nop
 80009be:	e7d9      	b.n	8000974 <main_function+0x4>
 80009c0:	20000258 	.word	0x20000258
 80009c4:	20000108 	.word	0x20000108
 80009c8:	2000025c 	.word	0x2000025c
 80009cc:	2000015c 	.word	0x2000015c
 80009d0:	20000260 	.word	0x20000260
 80009d4:	200001b0 	.word	0x200001b0
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000204 	.word	0x20000204

080009e0 <_Z41__static_initialization_and_destruction_0ii>:
//			if(a>1000){
//				a=0;
//				pos++;
//			}
	}
}
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b095      	sub	sp, #84	@ 0x54
 80009e4:	af12      	add	r7, sp, #72	@ 0x48
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d13c      	bne.n	8000a6a <_Z41__static_initialization_and_destruction_0ii+0x8a>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d137      	bne.n	8000a6a <_Z41__static_initialization_and_destruction_0ii+0x8a>
UART_servo servo1(1,1000,huart3);
 80009fa:	4c1e      	ldr	r4, [pc, #120]	@ (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80009fc:	4668      	mov	r0, sp
 80009fe:	1d23      	adds	r3, r4, #4
 8000a00:	2244      	movs	r2, #68	@ 0x44
 8000a02:	4619      	mov	r1, r3
 8000a04:	f002 faf4 	bl	8002ff0 <memcpy>
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000a12:	f7ff ff8d 	bl	8000930 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
UART_servo servo2(3,1000,huart3);
 8000a16:	4c17      	ldr	r4, [pc, #92]	@ (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000a18:	4668      	mov	r0, sp
 8000a1a:	1d23      	adds	r3, r4, #4
 8000a1c:	2244      	movs	r2, #68	@ 0x44
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f002 fae6 	bl	8002ff0 <memcpy>
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000a2e:	f7ff ff7f 	bl	8000930 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
UART_servo servo3(4,1000,huart3);
 8000a32:	4c10      	ldr	r4, [pc, #64]	@ (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000a34:	4668      	mov	r0, sp
 8000a36:	1d23      	adds	r3, r4, #4
 8000a38:	2244      	movs	r2, #68	@ 0x44
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f002 fad8 	bl	8002ff0 <memcpy>
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a46:	2104      	movs	r1, #4
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000a4a:	f7ff ff71 	bl	8000930 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
UART_servo servo4(5,1000,huart3);
 8000a4e:	4c09      	ldr	r4, [pc, #36]	@ (8000a74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000a50:	4668      	mov	r0, sp
 8000a52:	1d23      	adds	r3, r4, #4
 8000a54:	2244      	movs	r2, #68	@ 0x44
 8000a56:	4619      	mov	r1, r3
 8000a58:	f002 faca 	bl	8002ff0 <memcpy>
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a62:	2105      	movs	r1, #5
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000a66:	f7ff ff63 	bl	8000930 <_ZN10UART_servoC1Ett20__UART_HandleTypeDef>
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000c0 	.word	0x200000c0
 8000a78:	20000108 	.word	0x20000108
 8000a7c:	2000015c 	.word	0x2000015c
 8000a80:	200001b0 	.word	0x200001b0
 8000a84:	20000204 	.word	0x20000204

08000a88 <_GLOBAL__sub_I_servo1>:
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ffa5 	bl	80009e0 <_Z41__static_initialization_and_destruction_0ii>
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b60:	f000 fa8e 	bl	8001080 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b88:	d10d      	bne.n	8000ba6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd8:	d11d      	bne.n	8000c16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_TIM_MspPostInit+0x68>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_TIM_MspPostInit+0x68>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_TIM_MspPostInit+0x68>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <HAL_TIM_MspPostInit+0x6c>)
 8000c12:	f000 fa35 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a28      	ldr	r2, [pc, #160]	@ (8000ce8 <HAL_UART_MspInit+0xc0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d14a      	bne.n	8000ce0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a26      	ldr	r2, [pc, #152]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_UART_MspInit+0xc4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <HAL_UART_MspInit+0xc8>)
 8000cba:	f000 f9e1 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <HAL_UART_MspInit+0xcc>)
 8000cdc:	f000 f9d0 	bl	8001080 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x4>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f891 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f002 f8fd 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fc36 	bl	800061e <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dc0:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 8000dc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dc8:	20000268 	.word	0x20000268

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f90d 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe48 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f917 	bl	8001066 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f8ed 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000264 	.word	0x20000264

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000264 	.word	0x20000264

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff47 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff5c 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffb0 	bl	8000fd4 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e165      	b.n	8001368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8154 	bne.w	8001362 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80ae 	beq.w	8001362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b5d      	ldr	r3, [pc, #372]	@ (8001380 <HAL_GPIO_Init+0x300>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a5c      	ldr	r2, [pc, #368]	@ (8001380 <HAL_GPIO_Init+0x300>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b5a      	ldr	r3, [pc, #360]	@ (8001380 <HAL_GPIO_Init+0x300>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <HAL_GPIO_Init+0x304>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4f      	ldr	r2, [pc, #316]	@ (8001388 <HAL_GPIO_Init+0x308>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4e      	ldr	r2, [pc, #312]	@ (800138c <HAL_GPIO_Init+0x30c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4d      	ldr	r2, [pc, #308]	@ (8001390 <HAL_GPIO_Init+0x310>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4c      	ldr	r2, [pc, #304]	@ (8001394 <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4b      	ldr	r2, [pc, #300]	@ (8001398 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x20a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4a      	ldr	r2, [pc, #296]	@ (800139c <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x206>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a49      	ldr	r2, [pc, #292]	@ (80013a0 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x202>
 800127e:	2306      	movs	r3, #6
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x21c>
 8001282:	2307      	movs	r3, #7
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x21c>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x21c>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x21c>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x21c>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x21c>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x21c>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a31      	ldr	r2, [pc, #196]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a26      	ldr	r2, [pc, #152]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135c:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae96 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	@ 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40013c00 	.word	0x40013c00

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0cc      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b68      	ldr	r3, [pc, #416]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d90c      	bls.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b63      	ldr	r3, [pc, #396]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0b8      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a58      	ldr	r2, [pc, #352]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001406:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001414:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a52      	ldr	r2, [pc, #328]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800141e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	494d      	ldr	r1, [pc, #308]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d044      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d119      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e07f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d003      	beq.n	8001466 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	2b03      	cmp	r3, #3
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e06f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e067      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4934      	ldr	r1, [pc, #208]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fd00 	bl	8000e9c <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fcfc 	bl	8000e9c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e04f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d20c      	bcs.n	80014f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e032      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4916      	ldr	r1, [pc, #88]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	490e      	ldr	r1, [pc, #56]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152e:	f000 f855 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8001532:	4602      	mov	r2, r0
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	490a      	ldr	r1, [pc, #40]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	5ccb      	ldrb	r3, [r1, r3]
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fc60 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00
 8001564:	40023800 	.word	0x40023800
 8001568:	08003024 	.word	0x08003024
 800156c:	20000004 	.word	0x20000004
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_RCC_GetHCLKFreq+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000004 	.word	0x20000004

0800158c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001590:	f7ff fff0 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0a9b      	lsrs	r3, r3, #10
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	@ (80015b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	08003034 	.word	0x08003034

080015b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b8:	f7ff ffdc 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	0b5b      	lsrs	r3, r3, #13
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	08003034 	.word	0x08003034

080015dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e0:	b0a6      	sub	sp, #152	@ 0x98
 80015e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001602:	4bc8      	ldr	r3, [pc, #800]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b0c      	cmp	r3, #12
 800160c:	f200 817e 	bhi.w	800190c <HAL_RCC_GetSysClockFreq+0x330>
 8001610:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	0800164d 	.word	0x0800164d
 800161c:	0800190d 	.word	0x0800190d
 8001620:	0800190d 	.word	0x0800190d
 8001624:	0800190d 	.word	0x0800190d
 8001628:	08001655 	.word	0x08001655
 800162c:	0800190d 	.word	0x0800190d
 8001630:	0800190d 	.word	0x0800190d
 8001634:	0800190d 	.word	0x0800190d
 8001638:	0800165d 	.word	0x0800165d
 800163c:	0800190d 	.word	0x0800190d
 8001640:	0800190d 	.word	0x0800190d
 8001644:	0800190d 	.word	0x0800190d
 8001648:	080017c7 	.word	0x080017c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4bb6      	ldr	r3, [pc, #728]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x34c>)
 800164e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001652:	e15f      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4bb5      	ldr	r3, [pc, #724]	@ (800192c <HAL_RCC_GetSysClockFreq+0x350>)
 8001656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800165a:	e15b      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4bb1      	ldr	r3, [pc, #708]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001664:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001668:	4bae      	ldr	r3, [pc, #696]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d031      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4bab      	ldr	r3, [pc, #684]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800167e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001686:	663b      	str	r3, [r7, #96]	@ 0x60
 8001688:	2300      	movs	r3, #0
 800168a:	667b      	str	r3, [r7, #100]	@ 0x64
 800168c:	4ba7      	ldr	r3, [pc, #668]	@ (800192c <HAL_RCC_GetSysClockFreq+0x350>)
 800168e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001692:	462a      	mov	r2, r5
 8001694:	fb03 f202 	mul.w	r2, r3, r2
 8001698:	2300      	movs	r3, #0
 800169a:	4621      	mov	r1, r4
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	4aa2      	ldr	r2, [pc, #648]	@ (800192c <HAL_RCC_GetSysClockFreq+0x350>)
 80016a4:	4621      	mov	r1, r4
 80016a6:	fba1 1202 	umull	r1, r2, r1, r2
 80016aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016ac:	460a      	mov	r2, r1
 80016ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80016b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016b2:	4413      	add	r3, r2
 80016b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ba:	2200      	movs	r2, #0
 80016bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016c8:	f7fe fd9c 	bl	8000204 <__aeabi_uldivmod>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4613      	mov	r3, r2
 80016d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016d6:	e064      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80016e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016ec:	2300      	movs	r3, #0
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80016f4:	4622      	mov	r2, r4
 80016f6:	462b      	mov	r3, r5
 80016f8:	f04f 0000 	mov.w	r0, #0
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	0159      	lsls	r1, r3, #5
 8001702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001706:	0150      	lsls	r0, r2, #5
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4621      	mov	r1, r4
 800170e:	1a51      	subs	r1, r2, r1
 8001710:	6139      	str	r1, [r7, #16]
 8001712:	4629      	mov	r1, r5
 8001714:	eb63 0301 	sbc.w	r3, r3, r1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001726:	4659      	mov	r1, fp
 8001728:	018b      	lsls	r3, r1, #6
 800172a:	4651      	mov	r1, sl
 800172c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001730:	4651      	mov	r1, sl
 8001732:	018a      	lsls	r2, r1, #6
 8001734:	4651      	mov	r1, sl
 8001736:	ebb2 0801 	subs.w	r8, r2, r1
 800173a:	4659      	mov	r1, fp
 800173c:	eb63 0901 	sbc.w	r9, r3, r1
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800174c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001750:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	4623      	mov	r3, r4
 800175a:	eb18 0303 	adds.w	r3, r8, r3
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	462b      	mov	r3, r5
 8001762:	eb49 0303 	adc.w	r3, r9, r3
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001774:	4629      	mov	r1, r5
 8001776:	028b      	lsls	r3, r1, #10
 8001778:	4621      	mov	r1, r4
 800177a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800177e:	4621      	mov	r1, r4
 8001780:	028a      	lsls	r2, r1, #10
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800178a:	2200      	movs	r2, #0
 800178c:	643b      	str	r3, [r7, #64]	@ 0x40
 800178e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001790:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001794:	f7fe fd36 	bl	8000204 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017a2:	4b60      	ldr	r3, [pc, #384]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	3301      	adds	r3, #1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80017b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80017b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017c4:	e0a6      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c6:	4b57      	ldr	r3, [pc, #348]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d2:	4b54      	ldr	r3, [pc, #336]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d02a      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017de:	4b51      	ldr	r3, [pc, #324]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	2200      	movs	r2, #0
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017f0:	2100      	movs	r1, #0
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <HAL_RCC_GetSysClockFreq+0x350>)
 80017f4:	fb03 f201 	mul.w	r2, r3, r1
 80017f8:	2300      	movs	r3, #0
 80017fa:	fb00 f303 	mul.w	r3, r0, r3
 80017fe:	4413      	add	r3, r2
 8001800:	4a4a      	ldr	r2, [pc, #296]	@ (800192c <HAL_RCC_GetSysClockFreq+0x350>)
 8001802:	fba0 1202 	umull	r1, r2, r0, r2
 8001806:	677a      	str	r2, [r7, #116]	@ 0x74
 8001808:	460a      	mov	r2, r1
 800180a:	673a      	str	r2, [r7, #112]	@ 0x70
 800180c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800180e:	4413      	add	r3, r2
 8001810:	677b      	str	r3, [r7, #116]	@ 0x74
 8001812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001816:	2200      	movs	r2, #0
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
 800181a:	637a      	str	r2, [r7, #52]	@ 0x34
 800181c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001820:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001824:	f7fe fcee 	bl	8000204 <__aeabi_uldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4613      	mov	r3, r2
 800182e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001832:	e05b      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	2200      	movs	r2, #0
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800183e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 800184c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001850:	4642      	mov	r2, r8
 8001852:	464b      	mov	r3, r9
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0159      	lsls	r1, r3, #5
 800185e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001862:	0150      	lsls	r0, r2, #5
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4641      	mov	r1, r8
 800186a:	ebb2 0a01 	subs.w	sl, r2, r1
 800186e:	4649      	mov	r1, r9
 8001870:	eb63 0b01 	sbc.w	fp, r3, r1
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001888:	ebb2 040a 	subs.w	r4, r2, sl
 800188c:	eb63 050b 	sbc.w	r5, r3, fp
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	00eb      	lsls	r3, r5, #3
 800189a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189e:	00e2      	lsls	r2, r4, #3
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	4643      	mov	r3, r8
 80018a6:	18e3      	adds	r3, r4, r3
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	464b      	mov	r3, r9
 80018ac:	eb45 0303 	adc.w	r3, r5, r3
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018be:	4629      	mov	r1, r5
 80018c0:	028b      	lsls	r3, r1, #10
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c8:	4621      	mov	r1, r4
 80018ca:	028a      	lsls	r2, r1, #10
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018d4:	2200      	movs	r2, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	61fa      	str	r2, [r7, #28]
 80018da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018de:	f7fe fc91 	bl	8000204 <__aeabi_uldivmod>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4613      	mov	r3, r2
 80018e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x348>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0f1b      	lsrs	r3, r3, #28
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80018fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800190a:	e003      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x34c>)
 800190e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001918:	4618      	mov	r0, r3
 800191a:	3798      	adds	r7, #152	@ 0x98
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	017d7840 	.word	0x017d7840

08001930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e28d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8083 	beq.w	8001a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001950:	4b94      	ldr	r3, [pc, #592]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d019      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800195c:	4b91      	ldr	r3, [pc, #580]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
        || \
 8001964:	2b08      	cmp	r3, #8
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001968:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001974:	d00c      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b88      	ldr	r3, [pc, #544]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b84      	ldr	r3, [pc, #528]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x124>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e25a      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x90>
 80019b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xb4>
 80019ca:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a75      	ldr	r2, [pc, #468]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a72      	ldr	r2, [pc, #456]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa4a 	bl	8000e9c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa46 	bl	8000e9c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e21f      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fa36 	bl	8000e9c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fa32 	bl	8000e9c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e20b      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x104>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06f      	beq.n	8001b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a62:	4b50      	ldr	r3, [pc, #320]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d017      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d11c      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e1d3      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4937      	ldr	r1, [pc, #220]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f9df 	bl	8000e9c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f9db 	bl	8000e9c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1b4      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4925      	ldr	r1, [pc, #148]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9be 	bl	8000e9c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff f9ba 	bl	8000e9c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e193      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d036      	beq.n	8001bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f99e 	bl	8000e9c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff f99a 	bl	8000e9c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e173      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x234>
 8001b82:	e01b      	b.n	8001bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f987 	bl	8000e9c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e00e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff f983 	bl	8000e9c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d907      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e15c      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470000 	.word	0x42470000
 8001bac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ea      	bne.n	8001b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8097 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b83      	ldr	r3, [pc, #524]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b7f      	ldr	r3, [pc, #508]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	4b79      	ldr	r3, [pc, #484]	@ (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	@ (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f943 	bl	8000e9c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f93f 	bl	8000e9c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e118      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x31e>
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4a65      	ldr	r2, [pc, #404]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x340>
 8001c56:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5a:	4a60      	ldr	r2, [pc, #384]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c62:	4b5e      	ldr	r3, [pc, #376]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c66:	4a5d      	ldr	r2, [pc, #372]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c70:	4b5a      	ldr	r3, [pc, #360]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a59      	ldr	r2, [pc, #356]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7c:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a56      	ldr	r2, [pc, #344]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f023 0304 	bic.w	r3, r3, #4
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f904 	bl	8000e9c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f900 	bl	8000e9c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0d7      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ee      	beq.n	8001c98 <HAL_RCC_OscConfig+0x368>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f8ee 	bl	8000e9c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f8ea 	bl	8000e9c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0c1      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ee      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80ad 	beq.w	8001e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d060      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d145      	bne.n	8001da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b33      	ldr	r3, [pc, #204]	@ (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f8be 	bl	8000e9c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f8ba 	bl	8000e9c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e093      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	071b      	lsls	r3, r3, #28
 8001d6e:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f88f 	bl	8000e9c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff f88b 	bl	8000e9c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e064      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x452>
 8001da0:	e05c      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f878 	bl	8000e9c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f874 	bl	8000e9c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x480>
 8001dce:	e045      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e040      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_RCC_OscConfig+0x538>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d030      	beq.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d129      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d122      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10f      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fe70 	bl	8000b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 f996 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e097      	b.n	800204e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fdd8 	bl	8000ae8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f000 f93c 	bl	80021dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8c:	f023 0303 	bic.w	r3, r3, #3
 8001f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001faa:	f023 030c 	bic.w	r3, r3, #12
 8001fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	011a      	lsls	r2, r3, #4
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001fe8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8001ff0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002072:	2302      	movs	r3, #2
 8002074:	e0ae      	b.n	80021d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	f200 809f 	bhi.w	80021c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002086:	a201      	add	r2, pc, #4	@ (adr r2, 800208c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020c1 	.word	0x080020c1
 8002090:	080021c5 	.word	0x080021c5
 8002094:	080021c5 	.word	0x080021c5
 8002098:	080021c5 	.word	0x080021c5
 800209c:	08002101 	.word	0x08002101
 80020a0:	080021c5 	.word	0x080021c5
 80020a4:	080021c5 	.word	0x080021c5
 80020a8:	080021c5 	.word	0x080021c5
 80020ac:	08002143 	.word	0x08002143
 80020b0:	080021c5 	.word	0x080021c5
 80020b4:	080021c5 	.word	0x080021c5
 80020b8:	080021c5 	.word	0x080021c5
 80020bc:	08002183 	.word	0x08002183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f92e 	bl	8002328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0208 	orr.w	r2, r2, #8
 80020da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0204 	bic.w	r2, r2, #4
 80020ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6999      	ldr	r1, [r3, #24]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	619a      	str	r2, [r3, #24]
      break;
 80020fe:	e064      	b.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f97e 	bl	8002408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800211a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800212a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	021a      	lsls	r2, r3, #8
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	619a      	str	r2, [r3, #24]
      break;
 8002140:	e043      	b.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f9d3 	bl	80024f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0208 	orr.w	r2, r2, #8
 800215c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0204 	bic.w	r2, r2, #4
 800216c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69d9      	ldr	r1, [r3, #28]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	61da      	str	r2, [r3, #28]
      break;
 8002180:	e023      	b.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fa27 	bl	80025dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69d9      	ldr	r1, [r3, #28]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	61da      	str	r2, [r3, #28]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
      break;
 80021c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a43      	ldr	r2, [pc, #268]	@ (80022fc <TIM_Base_SetConfig+0x120>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fa:	d00f      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a40      	ldr	r2, [pc, #256]	@ (8002300 <TIM_Base_SetConfig+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00b      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3f      	ldr	r2, [pc, #252]	@ (8002304 <TIM_Base_SetConfig+0x128>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3e      	ldr	r2, [pc, #248]	@ (8002308 <TIM_Base_SetConfig+0x12c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3d      	ldr	r2, [pc, #244]	@ (800230c <TIM_Base_SetConfig+0x130>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a32      	ldr	r2, [pc, #200]	@ (80022fc <TIM_Base_SetConfig+0x120>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223c:	d027      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2f      	ldr	r2, [pc, #188]	@ (8002300 <TIM_Base_SetConfig+0x124>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d023      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <TIM_Base_SetConfig+0x128>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <TIM_Base_SetConfig+0x12c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <TIM_Base_SetConfig+0x130>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d017      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <TIM_Base_SetConfig+0x134>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2a      	ldr	r2, [pc, #168]	@ (8002314 <TIM_Base_SetConfig+0x138>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <TIM_Base_SetConfig+0x13c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <TIM_Base_SetConfig+0x140>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <TIM_Base_SetConfig+0x144>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	@ (8002324 <TIM_Base_SetConfig+0x148>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	@ (80022fc <TIM_Base_SetConfig+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0xf2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a10      	ldr	r2, [pc, #64]	@ (800230c <TIM_Base_SetConfig+0x130>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d103      	bne.n	80022d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f043 0204 	orr.w	r2, r3, #4
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40010400 	.word	0x40010400
 8002310:	40014000 	.word	0x40014000
 8002314:	40014400 	.word	0x40014400
 8002318:	40014800 	.word	0x40014800
 800231c:	40001800 	.word	0x40001800
 8002320:	40001c00 	.word	0x40001c00
 8002324:	40002000 	.word	0x40002000

08002328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 0201 	bic.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 0302 	bic.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a20      	ldr	r2, [pc, #128]	@ (8002400 <TIM_OC1_SetConfig+0xd8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_OC1_SetConfig+0x64>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <TIM_OC1_SetConfig+0xdc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10c      	bne.n	80023a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0308 	bic.w	r3, r3, #8
 8002392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a15      	ldr	r2, [pc, #84]	@ (8002400 <TIM_OC1_SetConfig+0xd8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d003      	beq.n	80023b6 <TIM_OC1_SetConfig+0x8e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <TIM_OC1_SetConfig+0xdc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d111      	bne.n	80023da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40010000 	.word	0x40010000
 8002404:	40010400 	.word	0x40010400

08002408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f023 0210 	bic.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800243e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0320 	bic.w	r3, r3, #32
 8002452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a22      	ldr	r2, [pc, #136]	@ (80024ec <TIM_OC2_SetConfig+0xe4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_OC2_SetConfig+0x68>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <TIM_OC2_SetConfig+0xe8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d10d      	bne.n	800248c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800248a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <TIM_OC2_SetConfig+0xe4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <TIM_OC2_SetConfig+0x94>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <TIM_OC2_SetConfig+0xe8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d113      	bne.n	80024c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40010000 	.word	0x40010000
 80024f0:	40010400 	.word	0x40010400

080024f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800253c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a21      	ldr	r2, [pc, #132]	@ (80025d4 <TIM_OC3_SetConfig+0xe0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_OC3_SetConfig+0x66>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <TIM_OC3_SetConfig+0xe4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10d      	bne.n	8002576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <TIM_OC3_SetConfig+0xe0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_OC3_SetConfig+0x92>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a15      	ldr	r2, [pc, #84]	@ (80025d8 <TIM_OC3_SetConfig+0xe4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d113      	bne.n	80025ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800258c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	621a      	str	r2, [r3, #32]
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40010400 	.word	0x40010400

080025dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800260a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	031b      	lsls	r3, r3, #12
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <TIM_OC4_SetConfig+0xa4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_OC4_SetConfig+0x68>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <TIM_OC4_SetConfig+0xa8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d109      	bne.n	8002658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800264a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	621a      	str	r2, [r3, #32]
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800269c:	2302      	movs	r3, #2
 800269e:	e05a      	b.n	8002756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ec:	d01d      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a15      	ldr	r2, [pc, #84]	@ (800277c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10c      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	4313      	orrs	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40010000 	.word	0x40010000
 8002768:	40000400 	.word	0x40000400
 800276c:	40000800 	.word	0x40000800
 8002770:	40000c00 	.word	0x40000c00
 8002774:	40010400 	.word	0x40010400
 8002778:	40014000 	.word	0x40014000
 800277c:	40001800 	.word	0x40001800

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e042      	b.n	8002818 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fa3e 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	@ 0x24
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f973 	bl	8002ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	d175      	bne.n	800292c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_UART_Transmit+0x2c>
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e06e      	b.n	800292e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2221      	movs	r2, #33	@ 0x21
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800285e:	f7fe fb1d 	bl	8000e9c <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002878:	d108      	bne.n	800288c <HAL_UART_Transmit+0x6c>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e003      	b.n	8002894 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002894:	e02e      	b.n	80028f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	@ 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f848 	bl	8002936 <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e03a      	b.n	800292e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3302      	adds	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e007      	b.n	80028e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1cb      	bne.n	8002896 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2200      	movs	r2, #0
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f814 	bl	8002936 <UART_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e006      	b.n	800292e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002946:	e03b      	b.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d037      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7fe faa4 	bl	8000e9c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	6a3a      	ldr	r2, [r7, #32]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <UART_WaitOnFlagUntilTimeout+0x30>
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03a      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b80      	cmp	r3, #128	@ 0x80
 800297c:	d020      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d01d      	beq.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d116      	bne.n	80029c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f81d 	bl	80029e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2208      	movs	r2, #8
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e00f      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d0b4      	beq.n	8002948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b095      	sub	sp, #84	@ 0x54
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a10:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3314      	adds	r3, #20
 8002a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3314      	adds	r3, #20
 8002a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d119      	bne.n	8002a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0310 	bic.w	r3, r3, #16
 8002a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a80:	61ba      	str	r2, [r7, #24]
 8002a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e5      	bne.n	8002a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aa2:	bf00      	nop
 8002aa4:	3754      	adds	r7, #84	@ 0x54
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b0c0      	sub	sp, #256	@ 0x100
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	ea40 0301 	orr.w	r3, r0, r1
 8002ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b08:	f021 010c 	bic.w	r1, r1, #12
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b16:	430b      	orrs	r3, r1
 8002b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2a:	6999      	ldr	r1, [r3, #24]
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	ea40 0301 	orr.w	r3, r0, r1
 8002b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d7c <UART_SetConfig+0x2cc>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d005      	beq.n	8002b50 <UART_SetConfig+0xa0>
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d80 <UART_SetConfig+0x2d0>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d104      	bne.n	8002b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7fe fd30 	bl	80015b4 <HAL_RCC_GetPCLK2Freq>
 8002b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b58:	e003      	b.n	8002b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7fe fd17 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 8002b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6c:	f040 810c 	bne.w	8002d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b92:	4621      	mov	r1, r4
 8002b94:	eb12 0801 	adds.w	r8, r2, r1
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb43 0901 	adc.w	r9, r3, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	eb18 0303 	adds.w	r3, r8, r3
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	eb49 0303 	adc.w	r3, r9, r3
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bde:	460b      	mov	r3, r1
 8002be0:	18db      	adds	r3, r3, r3
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be4:	4613      	mov	r3, r2
 8002be6:	eb42 0303 	adc.w	r3, r2, r3
 8002bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bf4:	f7fd fb06 	bl	8000204 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	011c      	lsls	r4, r3, #4
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c20:	415b      	adcs	r3, r3
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c28:	4641      	mov	r1, r8
 8002c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb43 0b01 	adc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c48:	4692      	mov	sl, r2
 8002c4a:	469b      	mov	fp, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb4b 0303 	adc.w	r3, fp, r3
 8002c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c8a:	f7fd fabb 	bl	8000204 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2264      	movs	r2, #100	@ 0x64
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	1acb      	subs	r3, r1, r3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002caa:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002cac:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cb8:	441c      	add	r4, r3
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d30:	460b      	mov	r3, r1
 8002d32:	18db      	adds	r3, r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d36:	4613      	mov	r3, r2
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d46:	f7fd fa5d 	bl	8000204 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	@ 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	@ 0x32
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4422      	add	r2, r4
 8002d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d78:	e106      	b.n	8002f88 <UART_SetConfig+0x4d8>
 8002d7a:	bf00      	nop
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	1891      	adds	r1, r2, r2
 8002da0:	6239      	str	r1, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	4641      	mov	r1, r8
 8002dac:	1854      	adds	r4, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0501 	adc.w	r5, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	eb45 0303 	adc.w	r3, r5, r3
 8002dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002df6:	4629      	mov	r1, r5
 8002df8:	008b      	lsls	r3, r1, #2
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e00:	4621      	mov	r1, r4
 8002e02:	008a      	lsls	r2, r1, #2
 8002e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e08:	f7fd f9fc 	bl	8000204 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011c      	lsls	r4, r3, #4
 8002e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	464b      	mov	r3, r9
 8002e30:	1891      	adds	r1, r2, r2
 8002e32:	61b9      	str	r1, [r7, #24]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	1851      	adds	r1, r2, r1
 8002e40:	6139      	str	r1, [r7, #16]
 8002e42:	4649      	mov	r1, r9
 8002e44:	414b      	adcs	r3, r1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e54:	4659      	mov	r1, fp
 8002e56:	00cb      	lsls	r3, r1, #3
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5e:	4651      	mov	r1, sl
 8002e60:	00ca      	lsls	r2, r1, #3
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e70:	464b      	mov	r3, r9
 8002e72:	460a      	mov	r2, r1
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e94:	4649      	mov	r1, r9
 8002e96:	008b      	lsls	r3, r1, #2
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	008a      	lsls	r2, r1, #2
 8002ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ea6:	f7fd f9ad 	bl	8000204 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	@ 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	3332      	adds	r3, #50	@ 0x32
 8002ec4:	4a33      	ldr	r2, [pc, #204]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed0:	441c      	add	r4, r3
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8002edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	1891      	adds	r1, r2, r2
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	415b      	adcs	r3, r3
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	1851      	adds	r1, r2, r1
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	414b      	adcs	r3, r1
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	00cb      	lsls	r3, r1, #3
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f12:	4651      	mov	r1, sl
 8002f14:	00ca      	lsls	r2, r1, #3
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f22:	464b      	mov	r3, r9
 8002f24:	460a      	mov	r2, r1
 8002f26:	eb42 0303 	adc.w	r3, r2, r3
 8002f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f44:	4649      	mov	r1, r9
 8002f46:	008b      	lsls	r3, r1, #2
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4e:	4641      	mov	r1, r8
 8002f50:	008a      	lsls	r2, r1, #2
 8002f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f56:	f7fd f955 	bl	8000204 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002f60:	fba3 1302 	umull	r1, r3, r3, r2
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	2164      	movs	r1, #100	@ 0x64
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	3332      	adds	r3, #50	@ 0x32
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4422      	add	r2, r4
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <memset>:
 8002f98:	4402      	add	r2, r0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <memset+0xa>
 8002fa0:	4770      	bx	lr
 8002fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa6:	e7f9      	b.n	8002f9c <memset+0x4>

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1b64      	subs	r4, r4, r5
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	@ (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f826 	bl	800300c <_init>
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003044 	.word	0x08003044
 8002fe4:	08003044 	.word	0x08003044
 8002fe8:	08003044 	.word	0x08003044
 8002fec:	0800304c 	.word	0x0800304c

08002ff0 <memcpy>:
 8002ff0:	440a      	add	r2, r1
 8002ff2:	4291      	cmp	r1, r2
 8002ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ff8:	d100      	bne.n	8002ffc <memcpy+0xc>
 8002ffa:	4770      	bx	lr
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003006:	4291      	cmp	r1, r2
 8003008:	d1f9      	bne.n	8002ffe <memcpy+0xe>
 800300a:	bd10      	pop	{r4, pc}

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
